{"version":3,"sources":["../node_modules/codemirror/mode/xquery/xquery.js"],"names":["CodeMirror","defineMode","keywords","kw","type","style","operator","atom","qualifier","kwObj","basic","i","l","length","types","operators","axis_specifiers","chain","stream","state","f","tokenize","tokenBase","ch","next","mightBeFunction","isEQName","isEQNameAhead","match","tokenXMLComment","tokenCDATA","tokenPreProcessing","isclose","eat","eatSpace","c","tagName","tokenTag","pushStateStack","popStateStack","isInXmlBlock","test","tokenComment","tokenVariable","known","propertyIsEnumerable","eatWhile","foundColon","word","current","isInXmlConstructor","tokenString","maybeEnd","maybeNested","nestedCount","quote","isInString","name","isInXmlAttributeBlock","isVariableChar","tokenAttribute","isIn","stack","newState","push","pop","reinstateTokenize","startState","cc","token","blockCommentStart","blockCommentEnd","defineMIME","mod","require"],"mappings":"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","file":"static/js/120.f65ba077.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"xquery\", function() {\n\n  // The keywords object is set to the result of this self executing\n  // function. Each keyword is a property of the keywords object whose\n  // value is {type: atype, style: astyle}\n  var keywords = function(){\n    // convenience functions used to build keywords object\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var operator = kw(\"operator\")\n      , atom = {type: \"atom\", style: \"atom\"}\n      , punctuation = {type: \"punctuation\", style: null}\n      , qualifier = {type: \"axis_specifier\", style: \"qualifier\"};\n\n    // kwObj is what is return from this function at the end\n    var kwObj = {\n      ',': punctuation\n    };\n\n    // a list of 'basic' keywords. For each add a property to kwObj with the value of\n    // {type: basic[i], style: \"keyword\"} e.g. 'after' --> {type: \"after\", style: \"keyword\"}\n    var basic = ['after', 'all', 'allowing', 'ancestor', 'ancestor-or-self', 'any', 'array', 'as',\n    'ascending', 'at', 'attribute', 'base-uri', 'before', 'boundary-space', 'by', 'case', 'cast',\n    'castable', 'catch', 'child', 'collation', 'comment', 'construction', 'contains', 'content',\n    'context', 'copy', 'copy-namespaces', 'count', 'decimal-format', 'declare', 'default', 'delete',\n    'descendant', 'descendant-or-self', 'descending', 'diacritics', 'different', 'distance',\n    'document', 'document-node', 'element', 'else', 'empty', 'empty-sequence', 'encoding', 'end',\n    'entire', 'every', 'exactly', 'except', 'external', 'first', 'following', 'following-sibling',\n    'for', 'from', 'ftand', 'ftnot', 'ft-option', 'ftor', 'function', 'fuzzy', 'greatest', 'group',\n    'if', 'import', 'in', 'inherit', 'insensitive', 'insert', 'instance', 'intersect', 'into',\n    'invoke', 'is', 'item', 'language', 'last', 'lax', 'least', 'let', 'levels', 'lowercase', 'map',\n    'modify', 'module', 'most', 'namespace', 'next', 'no', 'node', 'nodes', 'no-inherit',\n    'no-preserve', 'not', 'occurs', 'of', 'only', 'option', 'order', 'ordered', 'ordering',\n    'paragraph', 'paragraphs', 'parent', 'phrase', 'preceding', 'preceding-sibling', 'preserve',\n    'previous', 'processing-instruction', 'relationship', 'rename', 'replace', 'return',\n    'revalidation', 'same', 'satisfies', 'schema', 'schema-attribute', 'schema-element', 'score',\n    'self', 'sensitive', 'sentence', 'sentences', 'sequence', 'skip', 'sliding', 'some', 'stable',\n    'start', 'stemming', 'stop', 'strict', 'strip', 'switch', 'text', 'then', 'thesaurus', 'times',\n    'to', 'transform', 'treat', 'try', 'tumbling', 'type', 'typeswitch', 'union', 'unordered',\n    'update', 'updating', 'uppercase', 'using', 'validate', 'value', 'variable', 'version',\n    'weight', 'when', 'where', 'wildcards', 'window', 'with', 'without', 'word', 'words', 'xquery'];\n    for(var i=0, l=basic.length; i < l; i++) { kwObj[basic[i]] = kw(basic[i]);};\n\n    // a list of types. For each add a property to kwObj with the value of\n    // {type: \"atom\", style: \"atom\"}\n    var types = ['xs:anyAtomicType', 'xs:anySimpleType', 'xs:anyType', 'xs:anyURI',\n    'xs:base64Binary', 'xs:boolean', 'xs:byte', 'xs:date', 'xs:dateTime', 'xs:dateTimeStamp',\n    'xs:dayTimeDuration', 'xs:decimal', 'xs:double', 'xs:duration', 'xs:ENTITIES', 'xs:ENTITY',\n    'xs:float', 'xs:gDay', 'xs:gMonth', 'xs:gMonthDay', 'xs:gYear', 'xs:gYearMonth', 'xs:hexBinary',\n    'xs:ID', 'xs:IDREF', 'xs:IDREFS', 'xs:int', 'xs:integer', 'xs:item', 'xs:java', 'xs:language',\n    'xs:long', 'xs:Name', 'xs:NCName', 'xs:negativeInteger', 'xs:NMTOKEN', 'xs:NMTOKENS',\n    'xs:nonNegativeInteger', 'xs:nonPositiveInteger', 'xs:normalizedString', 'xs:NOTATION',\n    'xs:numeric', 'xs:positiveInteger', 'xs:precisionDecimal', 'xs:QName', 'xs:short', 'xs:string',\n    'xs:time', 'xs:token', 'xs:unsignedByte', 'xs:unsignedInt', 'xs:unsignedLong',\n    'xs:unsignedShort', 'xs:untyped', 'xs:untypedAtomic', 'xs:yearMonthDuration'];\n    for(var i=0, l=types.length; i < l; i++) { kwObj[types[i]] = atom;};\n\n    // each operator will add a property to kwObj with value of {type: \"operator\", style: \"keyword\"}\n    var operators = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', ':=', '=', '>', '>=', '<', '<=', '.', '|', '?', 'and', 'or', 'div', 'idiv', 'mod', '*', '/', '+', '-'];\n    for(var i=0, l=operators.length; i < l; i++) { kwObj[operators[i]] = operator;};\n\n    // each axis_specifiers will add a property to kwObj with value of {type: \"axis_specifier\", style: \"qualifier\"}\n    var axis_specifiers = [\"self::\", \"attribute::\", \"child::\", \"descendant::\", \"descendant-or-self::\", \"parent::\",\n    \"ancestor::\", \"ancestor-or-self::\", \"following::\", \"preceding::\", \"following-sibling::\", \"preceding-sibling::\"];\n    for(var i=0, l=axis_specifiers.length; i < l; i++) { kwObj[axis_specifiers[i]] = qualifier; };\n\n    return kwObj;\n  }();\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  // the primary mode tokenizer\n  function tokenBase(stream, state) {\n    var ch = stream.next(),\n        mightBeFunction = false,\n        isEQName = isEQNameAhead(stream);\n\n    // an XML tag (if not in some sub, chained tokenizer)\n    if (ch == \"<\") {\n      if(stream.match(\"!--\", true))\n        return chain(stream, state, tokenXMLComment);\n\n      if(stream.match(\"![CDATA\", false)) {\n        state.tokenize = tokenCDATA;\n        return \"tag\";\n      }\n\n      if(stream.match(\"?\", false)) {\n        return chain(stream, state, tokenPreProcessing);\n      }\n\n      var isclose = stream.eat(\"/\");\n      stream.eatSpace();\n      var tagName = \"\", c;\n      while ((c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/))) tagName += c;\n\n      return chain(stream, state, tokenTag(tagName, isclose));\n    }\n    // start code block\n    else if(ch == \"{\") {\n      pushStateStack(state, { type: \"codeblock\"});\n      return null;\n    }\n    // end code block\n    else if(ch == \"}\") {\n      popStateStack(state);\n      return null;\n    }\n    // if we're in an XML block\n    else if(isInXmlBlock(state)) {\n      if(ch == \">\")\n        return \"tag\";\n      else if(ch == \"/\" && stream.eat(\">\")) {\n        popStateStack(state);\n        return \"tag\";\n      }\n      else\n        return \"variable\";\n    }\n    // if a number\n    else if (/\\d/.test(ch)) {\n      stream.match(/^\\d*(?:\\.\\d*)?(?:E[+\\-]?\\d+)?/);\n      return \"atom\";\n    }\n    // comment start\n    else if (ch === \"(\" && stream.eat(\":\")) {\n      pushStateStack(state, { type: \"comment\"});\n      return chain(stream, state, tokenComment);\n    }\n    // quoted string\n    else if (!isEQName && (ch === '\"' || ch === \"'\"))\n      return chain(stream, state, tokenString(ch));\n    // variable\n    else if(ch === \"$\") {\n      return chain(stream, state, tokenVariable);\n    }\n    // assignment\n    else if(ch ===\":\" && stream.eat(\"=\")) {\n      return \"keyword\";\n    }\n    // open paren\n    else if(ch === \"(\") {\n      pushStateStack(state, { type: \"paren\"});\n      return null;\n    }\n    // close paren\n    else if(ch === \")\") {\n      popStateStack(state);\n      return null;\n    }\n    // open paren\n    else if(ch === \"[\") {\n      pushStateStack(state, { type: \"bracket\"});\n      return null;\n    }\n    // close paren\n    else if(ch === \"]\") {\n      popStateStack(state);\n      return null;\n    }\n    else {\n      var known = keywords.propertyIsEnumerable(ch) && keywords[ch];\n\n      // if there's a EQName ahead, consume the rest of the string portion, it's likely a function\n      if(isEQName && ch === '\\\"') while(stream.next() !== '\"'){}\n      if(isEQName && ch === '\\'') while(stream.next() !== '\\''){}\n\n      // gobble up a word if the character is not known\n      if(!known) stream.eatWhile(/[\\w\\$_-]/);\n\n      // gobble a colon in the case that is a lib func type call fn:doc\n      var foundColon = stream.eat(\":\");\n\n      // if there's not a second colon, gobble another word. Otherwise, it's probably an axis specifier\n      // which should get matched as a keyword\n      if(!stream.eat(\":\") && foundColon) {\n        stream.eatWhile(/[\\w\\$_-]/);\n      }\n      // if the next non whitespace character is an open paren, this is probably a function (if not a keyword of other sort)\n      if(stream.match(/^[ \\t]*\\(/, false)) {\n        mightBeFunction = true;\n      }\n      // is the word a keyword?\n      var word = stream.current();\n      known = keywords.propertyIsEnumerable(word) && keywords[word];\n\n      // if we think it's a function call but not yet known,\n      // set style to variable for now for lack of something better\n      if(mightBeFunction && !known) known = {type: \"function_call\", style: \"variable def\"};\n\n      // if the previous word was element, attribute, axis specifier, this word should be the name of that\n      if(isInXmlConstructor(state)) {\n        popStateStack(state);\n        return \"variable\";\n      }\n      // as previously checked, if the word is element,attribute, axis specifier, call it an \"xmlconstructor\" and\n      // push the stack so we know to look for it on the next word\n      if(word == \"element\" || word == \"attribute\" || known.type == \"axis_specifier\") pushStateStack(state, {type: \"xmlconstructor\"});\n\n      // if the word is known, return the details of that else just call this a generic 'word'\n      return known ? known.style : \"variable\";\n    }\n  }\n\n  // handle comments, including nested\n  function tokenComment(stream, state) {\n    var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        if(nestedCount > 0)\n          nestedCount--;\n        else {\n          popStateStack(state);\n          break;\n        }\n      }\n      else if(ch == \":\" && maybeNested) {\n        nestedCount++;\n      }\n      maybeEnd = (ch == \":\");\n      maybeNested = (ch == \"(\");\n    }\n\n    return \"comment\";\n  }\n\n  // tokenizer for string literals\n  // optionally pass a tokenizer function to set state.tokenize back to when finished\n  function tokenString(quote, f) {\n    return function(stream, state) {\n      var ch;\n\n      if(isInString(state) && stream.current() == quote) {\n        popStateStack(state);\n        if(f) state.tokenize = f;\n        return \"string\";\n      }\n\n      pushStateStack(state, { type: \"string\", name: quote, tokenize: tokenString(quote, f) });\n\n      // if we're in a string and in an XML block, allow an embedded code block\n      if(stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n        state.tokenize = tokenBase;\n        return \"string\";\n      }\n\n\n      while (ch = stream.next()) {\n        if (ch ==  quote) {\n          popStateStack(state);\n          if(f) state.tokenize = f;\n          break;\n        }\n        else {\n          // if we're in a string and in an XML block, allow an embedded code block in an attribute\n          if(stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n            state.tokenize = tokenBase;\n            return \"string\";\n          }\n\n        }\n      }\n\n      return \"string\";\n    };\n  }\n\n  // tokenizer for variables\n  function tokenVariable(stream, state) {\n    var isVariableChar = /[\\w\\$_-]/;\n\n    // a variable may start with a quoted EQName so if the next character is quote, consume to the next quote\n    if(stream.eat(\"\\\"\")) {\n      while(stream.next() !== '\\\"'){};\n      stream.eat(\":\");\n    } else {\n      stream.eatWhile(isVariableChar);\n      if(!stream.match(\":=\", false)) stream.eat(\":\");\n    }\n    stream.eatWhile(isVariableChar);\n    state.tokenize = tokenBase;\n    return \"variable\";\n  }\n\n  // tokenizer for XML tags\n  function tokenTag(name, isclose) {\n    return function(stream, state) {\n      stream.eatSpace();\n      if(isclose && stream.eat(\">\")) {\n        popStateStack(state);\n        state.tokenize = tokenBase;\n        return \"tag\";\n      }\n      // self closing tag without attributes?\n      if(!stream.eat(\"/\"))\n        pushStateStack(state, { type: \"tag\", name: name, tokenize: tokenBase});\n      if(!stream.eat(\">\")) {\n        state.tokenize = tokenAttribute;\n        return \"tag\";\n      }\n      else {\n        state.tokenize = tokenBase;\n      }\n      return \"tag\";\n    };\n  }\n\n  // tokenizer for XML attributes\n  function tokenAttribute(stream, state) {\n    var ch = stream.next();\n\n    if(ch == \"/\" && stream.eat(\">\")) {\n      if(isInXmlAttributeBlock(state)) popStateStack(state);\n      if(isInXmlBlock(state)) popStateStack(state);\n      return \"tag\";\n    }\n    if(ch == \">\") {\n      if(isInXmlAttributeBlock(state)) popStateStack(state);\n      return \"tag\";\n    }\n    if(ch == \"=\")\n      return null;\n    // quoted string\n    if (ch == '\"' || ch == \"'\")\n      return chain(stream, state, tokenString(ch, tokenAttribute));\n\n    if(!isInXmlAttributeBlock(state))\n      pushStateStack(state, { type: \"attribute\", tokenize: tokenAttribute});\n\n    stream.eat(/[a-zA-Z_:]/);\n    stream.eatWhile(/[-a-zA-Z0-9_:.]/);\n    stream.eatSpace();\n\n    // the case where the attribute has not value and the tag was closed\n    if(stream.match(\">\", false) || stream.match(\"/\", false)) {\n      popStateStack(state);\n      state.tokenize = tokenBase;\n    }\n\n    return \"attribute\";\n  }\n\n  // handle comments, including nested\n  function tokenXMLComment(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"-\" && stream.match(\"->\", true)) {\n        state.tokenize = tokenBase;\n        return \"comment\";\n      }\n    }\n  }\n\n\n  // handle CDATA\n  function tokenCDATA(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"]\" && stream.match(\"]\", true)) {\n        state.tokenize = tokenBase;\n        return \"comment\";\n      }\n    }\n  }\n\n  // handle preprocessing instructions\n  function tokenPreProcessing(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"?\" && stream.match(\">\", true)) {\n        state.tokenize = tokenBase;\n        return \"comment meta\";\n      }\n    }\n  }\n\n\n  // functions to test the current context of the state\n  function isInXmlBlock(state) { return isIn(state, \"tag\"); }\n  function isInXmlAttributeBlock(state) { return isIn(state, \"attribute\"); }\n  function isInXmlConstructor(state) { return isIn(state, \"xmlconstructor\"); }\n  function isInString(state) { return isIn(state, \"string\"); }\n\n  function isEQNameAhead(stream) {\n    // assume we've already eaten a quote (\")\n    if(stream.current() === '\"')\n      return stream.match(/^[^\\\"]+\\\"\\:/, false);\n    else if(stream.current() === '\\'')\n      return stream.match(/^[^\\\"]+\\'\\:/, false);\n    else\n      return false;\n  }\n\n  function isIn(state, type) {\n    return (state.stack.length && state.stack[state.stack.length - 1].type == type);\n  }\n\n  function pushStateStack(state, newState) {\n    state.stack.push(newState);\n  }\n\n  function popStateStack(state) {\n    state.stack.pop();\n    var reinstateTokenize = state.stack.length && state.stack[state.stack.length-1].tokenize;\n    state.tokenize = reinstateTokenize || tokenBase;\n  }\n\n  // the interface for the mode API\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        cc: [],\n        stack: []\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    },\n\n    blockCommentStart: \"(:\",\n    blockCommentEnd: \":)\"\n\n  };\n\n});\n\nCodeMirror.defineMIME(\"application/xquery\", \"xquery\");\n\n});\n"],"sourceRoot":""}