{"version":3,"sources":["../node_modules/codemirror/mode/pascal/pascal.js"],"names":["CodeMirror","defineMode","words","str","obj","split","i","length","keywords","atoms","isOperatorChar","tokenBase","stream","state","ch","next","startOfLine","skipToEnd","tokenize","tokenString","eat","tokenComment","tokenCommentBraces","test","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","startState","token","eatSpace","style","electricChars","defineMIME","mod","require"],"mappings":"+GAUG,SAASA,GACZ,aAEAA,EAAWC,WAAW,UAAU,WAC9B,SAASC,EAAMC,GAEb,IADA,IAAIC,EAAM,GAAIF,EAAQC,EAAIE,MAAM,KACvBC,EAAI,EAAGA,EAAIJ,EAAMK,SAAUD,EAAGF,EAAIF,EAAMI,KAAM,EACvD,OAAOF,EAET,IAAII,EAAWN,EACb,w9BAcEO,EAAQ,CAAC,MAAQ,GAEjBC,EAAiB,mBAErB,SAASC,EAAUC,EAAQC,GACzB,IAAIC,EAAKF,EAAOG,OAChB,GAAU,KAAND,GAAaD,EAAMG,YAErB,OADAJ,EAAOK,YACA,OAET,GAAU,KAANH,GAAmB,KAANA,EAEf,OADAD,EAAMK,SAAWC,EAAYL,GACtBD,EAAMK,SAASN,EAAQC,GAEhC,GAAU,KAANC,GAAaF,EAAOQ,IAAI,KAE1B,OADAP,EAAMK,SAAWG,EACVA,EAAaT,EAAQC,GAE9B,GAAU,KAANC,EAEF,OADAD,EAAMK,SAAWI,EACVA,EAAmBV,EAAQC,GAEpC,GAAI,mBAAmBU,KAAKT,GAC1B,OAAO,KAET,GAAI,KAAKS,KAAKT,GAEZ,OADAF,EAAOY,SAAS,UACT,SAET,GAAU,KAANV,GACEF,EAAOQ,IAAI,KAEb,OADAR,EAAOK,YACA,UAGX,GAAIP,EAAea,KAAKT,GAEtB,OADAF,EAAOY,SAASd,GACT,WAETE,EAAOY,SAAS,WAChB,IAAIC,EAAMb,EAAOc,UACjB,OAAIlB,EAASmB,qBAAqBF,GAAa,UAC3ChB,EAAMkB,qBAAqBF,GAAa,OACrC,WAGT,SAASN,EAAYS,GACnB,OAAO,SAAShB,EAAQC,GAEtB,IADA,IAAqBE,EAAjBc,GAAU,EAAaC,GAAM,EACA,OAAzBf,EAAOH,EAAOG,SAAiB,CACrC,GAAIA,GAAQa,IAAUC,EAAS,CAACC,GAAM,EAAM,MAC5CD,GAAWA,GAAmB,MAARd,EAGxB,OADIe,GAAQD,IAAShB,EAAMK,SAAW,MAC/B,UAIX,SAASG,EAAaT,EAAQC,GAE5B,IADA,IAAsBC,EAAlBiB,GAAW,EACRjB,EAAKF,EAAOG,QAAQ,CACzB,GAAU,KAAND,GAAaiB,EAAU,CACzBlB,EAAMK,SAAW,KACjB,MAEFa,EAAkB,KAANjB,EAEd,MAAO,UAGT,SAASQ,EAAmBV,EAAQC,GAElC,IADA,IAAIC,EACGA,EAAKF,EAAOG,QACjB,GAAU,KAAND,EAAW,CACbD,EAAMK,SAAW,KACjB,MAGJ,MAAO,UAKT,MAAO,CACLc,WAAY,WACV,MAAO,CAACd,SAAU,OAGpBe,MAAO,SAASrB,EAAQC,GACtB,GAAID,EAAOsB,WAAY,OAAO,KAC9B,IAAIC,GAAStB,EAAMK,UAAYP,GAAWC,EAAQC,GAClD,OAAkDsB,GAIpDC,cAAe,SAInBpC,EAAWqC,WAAW,gBAAiB,UAhInCC,CAAIC,EAAQ","file":"static/js/78.61119c14.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pascal\", function() {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\n    \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\n  var atoms = {\"null\": true};\n\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == \"#\" && state.startOfLine) {\n      stream.skipToEnd();\n      return \"meta\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"(\" && stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (ch == \"{\") {\n      state.tokenize = tokenCommentBraces;\n      return tokenCommentBraces(stream, state);\n    }\n    if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenCommentBraces(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"}\") {\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"comment\";\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n\n});\n"],"sourceRoot":""}