{"version":3,"sources":["../node_modules/codemirror/mode/properties/properties.js"],"names":["CodeMirror","defineMode","token","stream","state","sol","afterSection","eol","nextMultiline","inMultiline","position","eatSpace","ch","next","skipTo","eat","skipToEnd","startState","defineMIME","mod","require"],"mappings":"+GAUG,SAASA,GACZ,aAEAA,EAAWC,WAAW,cAAc,WAClC,MAAO,CACLC,MAAO,SAASC,EAAQC,GACtB,IAAIC,EAAMF,EAAOE,OAASD,EAAME,aAC5BC,EAAMJ,EAAOI,MAkBjB,GAhBAH,EAAME,cAAe,EAEjBD,IACED,EAAMI,eACRJ,EAAMK,aAAc,EACpBL,EAAMI,eAAgB,GAEtBJ,EAAMM,SAAW,OAIjBH,IAASH,EAAMI,gBACjBJ,EAAMK,aAAc,EACpBL,EAAMM,SAAW,OAGfL,EACF,KAAMF,EAAOQ,aAGf,IAAIC,EAAKT,EAAOU,OAEhB,OAAIR,GAAe,MAAPO,GAAqB,MAAPA,GAAqB,MAAPA,EAI7BP,GAAc,MAAPO,GAChBR,EAAME,cAAe,EACrBH,EAAOW,OAAO,KAAMX,EAAOY,IAAI,KACxB,UACS,MAAPH,GAAqB,MAAPA,GACvBR,EAAMM,SAAW,QACV,OACS,OAAPE,GAAkC,UAAnBR,EAAMM,UAC1BP,EAAOI,QAETH,EAAMI,eAAgB,GAInBJ,EAAMM,WAjBXN,EAAMM,SAAW,UACjBP,EAAOa,YACA,YAkBXC,WAAY,WACV,MAAO,CACLP,SAAW,MACXF,eAAgB,EAChBC,aAAc,EACdH,cAAe,QAOvBN,EAAWkB,WAAW,oBAAqB,cAC3ClB,EAAWkB,WAAW,aAAc,cAtEhCC,CAAIC,EAAQ","file":"static/js/83.c9912eaa.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"properties\", function() {\n  return {\n    token: function(stream, state) {\n      var sol = stream.sol() || state.afterSection;\n      var eol = stream.eol();\n\n      state.afterSection = false;\n\n      if (sol) {\n        if (state.nextMultiline) {\n          state.inMultiline = true;\n          state.nextMultiline = false;\n        } else {\n          state.position = \"def\";\n        }\n      }\n\n      if (eol && ! state.nextMultiline) {\n        state.inMultiline = false;\n        state.position = \"def\";\n      }\n\n      if (sol) {\n        while(stream.eatSpace()) {}\n      }\n\n      var ch = stream.next();\n\n      if (sol && (ch === \"#\" || ch === \"!\" || ch === \";\")) {\n        state.position = \"comment\";\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (sol && ch === \"[\") {\n        state.afterSection = true;\n        stream.skipTo(\"]\"); stream.eat(\"]\");\n        return \"header\";\n      } else if (ch === \"=\" || ch === \":\") {\n        state.position = \"quote\";\n        return null;\n      } else if (ch === \"\\\\\" && state.position === \"quote\") {\n        if (stream.eol()) {  // end of line?\n          // Multiline value\n          state.nextMultiline = true;\n        }\n      }\n\n      return state.position;\n    },\n\n    startState: function() {\n      return {\n        position : \"def\",       // Current position, \"def\", \"quote\" or \"comment\"\n        nextMultiline : false,  // Is the next line multiline value\n        inMultiline : false,    // Is the current line a multiline value\n        afterSection : false    // Did we just open a section\n      };\n    }\n\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-properties\", \"properties\");\nCodeMirror.defineMIME(\"text/x-ini\", \"properties\");\n\n});\n"],"sourceRoot":""}