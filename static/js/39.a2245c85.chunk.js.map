{"version":3,"sources":["../node_modules/codemirror/mode/commonlisp/commonlisp.js"],"names":["CodeMirror","defineMode","config","type","specialForm","assumeBody","numLiteral","symbol","readSym","stream","ch","next","test","backUp","current","base","state","eatSpace","match","tokenize","inString","skipToEnd","skipTo","inComment","name","charAt","lastType","escaped","last","startState","ctx","prev","start","indentTo","token","sol","style","indentUnit","column","indent","_textAfter","i","closeBrackets","pairs","lineComment","blockCommentStart","blockCommentEnd","defineMIME","mod","require"],"mappings":"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","file":"static/js/39.a2245c85.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"commonlisp\", function (config) {\n  var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\n  var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\n  var numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\n  var symbol = /[^\\s'`,@()\\[\\]\";]/;\n  var type;\n\n  function readSym(stream) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"\\\\\") stream.next();\n      else if (!symbol.test(ch)) { stream.backUp(1); break; }\n    }\n    return stream.current();\n  }\n\n  function base(stream, state) {\n    if (stream.eatSpace()) {type = \"ws\"; return null;}\n    if (stream.match(numLiteral)) return \"number\";\n    var ch = stream.next();\n    if (ch == \"\\\\\") ch = stream.next();\n\n    if (ch == '\"') return (state.tokenize = inString)(stream, state);\n    else if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n    else if (ch == \")\" || ch == \"]\") { type = \"close\"; return \"bracket\"; }\n    else if (ch == \";\") { stream.skipToEnd(); type = \"ws\"; return \"comment\"; }\n    else if (/['`,@]/.test(ch)) return null;\n    else if (ch == \"|\") {\n      if (stream.skipTo(\"|\")) { stream.next(); return \"symbol\"; }\n      else { stream.skipToEnd(); return \"error\"; }\n    } else if (ch == \"#\") {\n      var ch = stream.next();\n      if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n      else if (/[+\\-=\\.']/.test(ch)) return null;\n      else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n      else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);\n      else if (ch == \":\") { readSym(stream); return \"meta\"; }\n      else if (ch == \"\\\\\") { stream.next(); readSym(stream); return \"string-2\" }\n      else return \"error\";\n    } else {\n      var name = readSym(stream);\n      if (name == \".\") return null;\n      type = \"symbol\";\n      if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n      if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n      if (name.charAt(0) == \"&\") return \"variable-2\";\n      return \"variable\";\n    }\n  }\n\n  function inString(stream, state) {\n    var escaped = false, next;\n    while (next = stream.next()) {\n      if (next == '\"' && !escaped) { state.tokenize = base; break; }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return \"string\";\n  }\n\n  function inComment(stream, state) {\n    var next, last;\n    while (next = stream.next()) {\n      if (next == \"#\" && last == \"|\") { state.tokenize = base; break; }\n      last = next;\n    }\n    type = \"ws\";\n    return \"comment\";\n  }\n\n  return {\n    startState: function () {\n      return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};\n    },\n\n    token: function (stream, state) {\n      if (stream.sol() && typeof state.ctx.indentTo != \"number\")\n        state.ctx.indentTo = state.ctx.start + 1;\n\n      type = null;\n      var style = state.tokenize(stream, state);\n      if (type != \"ws\") {\n        if (state.ctx.indentTo == null) {\n          if (type == \"symbol\" && assumeBody.test(stream.current()))\n            state.ctx.indentTo = state.ctx.start + config.indentUnit;\n          else\n            state.ctx.indentTo = \"next\";\n        } else if (state.ctx.indentTo == \"next\") {\n          state.ctx.indentTo = stream.column();\n        }\n        state.lastType = type;\n      }\n      if (type == \"open\") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n      else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n      return style;\n    },\n\n    indent: function (state, _textAfter) {\n      var i = state.ctx.indentTo;\n      return typeof i == \"number\" ? i : state.ctx.start + 1;\n    },\n\n    closeBrackets: {pairs: \"()[]{}\\\"\\\"\"},\n    lineComment: \";;\",\n    blockCommentStart: \"#|\",\n    blockCommentEnd: \"|#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-common-lisp\", \"commonlisp\");\n\n});\n"],"sourceRoot":""}