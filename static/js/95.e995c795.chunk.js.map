{"version":3,"sources":["../node_modules/codemirror/mode/sieve/sieve.js"],"names":["CodeMirror","defineMode","config","words","str","obj","split","i","length","keywords","atoms","indentUnit","tokenBase","stream","state","ch","next","eat","tokenize","tokenCComment","skipToEnd","tokenString","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","propertyIsEnumerable","_multiLineString","sol","eol","eatSpace","peek","maybeEnd","quote","escaped","startState","base","baseIndent","token","indent","_textAfter","electricChars","defineMIME","mod","require"],"mappings":"+GAUG,SAASA,GACZ,aAEAA,EAAWC,WAAW,SAAS,SAASC,GACtC,SAASC,EAAMC,GAEb,IADA,IAAIC,EAAM,GAAIF,EAAQC,EAAIE,MAAM,KACvBC,EAAI,EAAGA,EAAIJ,EAAMK,SAAUD,EAAGF,EAAIF,EAAMI,KAAM,EACvD,OAAOF,EAGT,IAAII,EAAWN,EAAM,8BACjBO,EAAQP,EAAM,kBACdQ,EAAaT,EAAOS,WAExB,SAASC,EAAUC,EAAQC,GAEzB,IAAIC,EAAKF,EAAOG,OAChB,GAAU,KAAND,GAAaF,EAAOI,IAAI,KAE1B,OADAH,EAAMI,SAAWC,EACVA,EAAcN,EAAQC,GAG/B,GAAW,MAAPC,EAEF,OADAF,EAAOO,YACA,UAGT,GAAU,KAANL,EAEF,OADAD,EAAMI,SAAWG,EAAYN,GACtBD,EAAMI,SAASL,EAAQC,GAGhC,GAAU,KAANC,EAKF,OAJAD,EAAMQ,QAAQC,KAAK,KAGnBT,EAAMQ,QAAQC,KAAK,KACZ,KAGT,GAAW,MAAPR,EAEF,OADAD,EAAMQ,QAAQC,KAAK,KACZ,KAQT,GALU,KAANR,IACFD,EAAMQ,QAAQE,MACdV,EAAMQ,QAAQE,OAGL,MAAPT,EAEF,OADAD,EAAMQ,QAAQE,MACP,KAGT,GAAU,KAANT,EACF,OAAO,KAET,GAAU,KAANA,EACF,OAAO,KAGT,GAAI,aAAaU,KAAKV,GACpB,OAAO,KAGT,GAAI,KAAKU,KAAKV,GAGZ,OAFAF,EAAOa,SAAS,QAChBb,EAAOI,IAAI,YACJ,SAIT,GAAU,KAANF,EAIF,OAHAF,EAAOa,SAAS,aAChBb,EAAOa,SAAS,gBAET,WAGTb,EAAOa,SAAS,MAChB,IAAIC,EAAMd,EAAOe,UAKjB,MAAY,QAAPD,GAAkBd,EAAOI,IAAI,MAEhCH,EAAMI,SAAWW,EACV,UAGLpB,EAASqB,qBAAqBH,GACzB,UAELjB,EAAMoB,qBAAqBH,GACtB,OAEF,KAGT,SAASE,EAAqBhB,EAAQC,GAIpC,OAFAA,EAAMiB,kBAAmB,EAEpBlB,EAAOmB,OAYU,KAAjBnB,EAAOG,QAAoBH,EAAOoB,QAErCnB,EAAMiB,kBAAmB,EACzBjB,EAAMI,SAAWN,GAGZ,WAjBLC,EAAOqB,WAEc,KAAjBrB,EAAOsB,QACTtB,EAAOO,YACA,YAGTP,EAAOO,YACA,WAYX,SAASD,EAAcN,EAAQC,GAE7B,IADA,IAAsBC,EAAlBqB,GAAW,EACgB,OAAvBrB,EAAKF,EAAOG,SAAiB,CACnC,GAAIoB,GAAkB,KAANrB,EAAW,CACzBD,EAAMI,SAAWN,EACjB,MAEFwB,EAAkB,KAANrB,EAEd,MAAO,UAGT,SAASM,EAAYgB,GACnB,OAAO,SAASxB,EAAQC,GAEtB,IADA,IAAqBC,EAAjBuB,GAAU,EACiB,OAAvBvB,EAAKF,EAAOG,UACdD,GAAMsB,GAAUC,IAEpBA,GAAWA,GAAiB,MAANvB,EAGxB,OADKuB,IAASxB,EAAMI,SAAWN,GACxB,UAIX,MAAO,CACL2B,WAAY,SAASC,GACnB,MAAO,CAACtB,SAAUN,EACV6B,WAAYD,GAAQ,EACpBlB,QAAS,KAGnBoB,MAAO,SAAS7B,EAAQC,GACtB,OAAID,EAAOqB,WACF,MAEDpB,EAAMI,UAAYN,GAAWC,EAAQC,IAG/C6B,OAAQ,SAAS7B,EAAO8B,GACtB,IAAIpC,EAASM,EAAMQ,QAAQd,OAO3B,OANIoC,GAAgC,KAAjBA,EAAW,IAC5BpC,IAEEA,EAAQ,IACVA,EAAS,GAEJA,EAASG,GAGlBkC,cAAe,QAInB7C,EAAW8C,WAAW,oBAAqB,SAzLvCC,CAAIC,EAAQ","file":"static/js/95.e995c795.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sieve\", function(config) {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var keywords = words(\"if elsif else stop require\");\n  var atoms = words(\"true false not\");\n  var indentUnit = config.indentUnit;\n\n  function tokenBase(stream, state) {\n\n    var ch = stream.next();\n    if (ch == \"/\" && stream.eat(\"*\")) {\n      state.tokenize = tokenCComment;\n      return tokenCComment(stream, state);\n    }\n\n    if (ch === '#') {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (ch == \"\\\"\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    if (ch == \"(\") {\n      state._indent.push(\"(\");\n      // add virtual angel wings so that editor behaves...\n      // ...more sane in case of broken brackets\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch === \"{\") {\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch == \")\")  {\n      state._indent.pop();\n      state._indent.pop();\n    }\n\n    if (ch === \"}\") {\n      state._indent.pop();\n      return null;\n    }\n\n    if (ch == \",\")\n      return null;\n\n    if (ch == \";\")\n      return null;\n\n\n    if (/[{}\\(\\),;]/.test(ch))\n      return null;\n\n    // 1*DIGIT \"K\" / \"M\" / \"G\"\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\d]/);\n      stream.eat(/[KkMmGg]/);\n      return \"number\";\n    }\n\n    // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n    if (ch == \":\") {\n      stream.eatWhile(/[a-zA-Z_]/);\n      stream.eatWhile(/[a-zA-Z0-9_]/);\n\n      return \"operator\";\n    }\n\n    stream.eatWhile(/\\w/);\n    var cur = stream.current();\n\n    // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n    // *(multiline-literal / multiline-dotstart)\n    // \".\" CRLF\n    if ((cur == \"text\") && stream.eat(\":\"))\n    {\n      state.tokenize = tokenMultiLineString;\n      return \"string\";\n    }\n\n    if (keywords.propertyIsEnumerable(cur))\n      return \"keyword\";\n\n    if (atoms.propertyIsEnumerable(cur))\n      return \"atom\";\n\n    return null;\n  }\n\n  function tokenMultiLineString(stream, state)\n  {\n    state._multiLineString = true;\n    // the first line is special it may contain a comment\n    if (!stream.sol()) {\n      stream.eatSpace();\n\n      if (stream.peek() == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      stream.skipToEnd();\n      return \"string\";\n    }\n\n    if ((stream.next() == \".\")  && (stream.eol()))\n    {\n      state._multiLineString = false;\n      state.tokenize = tokenBase;\n    }\n\n    return \"string\";\n  }\n\n  function tokenCComment(stream, state) {\n    var maybeEnd = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (maybeEnd && ch == \"/\") {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped)\n          break;\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  return {\n    startState: function(base) {\n      return {tokenize: tokenBase,\n              baseIndent: base || 0,\n              _indent: []};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n\n      return (state.tokenize || tokenBase)(stream, state);\n    },\n\n    indent: function(state, _textAfter) {\n      var length = state._indent.length;\n      if (_textAfter && (_textAfter[0] == \"}\"))\n        length--;\n\n      if (length <0)\n        length = 0;\n\n      return length * indentUnit;\n    },\n\n    electricChars: \"}\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sieve\", \"sieve\");\n\n});\n"],"sourceRoot":""}