{"version":3,"sources":["../node_modules/codemirror/mode/velocity/velocity.js"],"names":["CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","specials","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inString","inParams","lastTokenWasBuiltin","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","propertyIsEnumerable","current","word","peek","toLowerCase","pos","string","charAt","quote","escaped","end","maybeEnd","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME","mod","require"],"mappings":"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","file":"static/js/115.f854d649.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"velocity\", function() {\n    function parseWords(str) {\n        var obj = {}, words = str.split(\" \");\n        for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n        return obj;\n    }\n\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                              \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                               \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\n    function chain(stream, state, f) {\n        state.tokenize = f;\n        return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n        var beforeParams = state.beforeParams;\n        state.beforeParams = false;\n        var ch = stream.next();\n        // start of unparsed string?\n        if ((ch == \"'\") && !state.inString && state.inParams) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenString(ch));\n        }\n        // start of parsed string?\n        else if ((ch == '\"')) {\n            state.lastTokenWasBuiltin = false;\n            if (state.inString) {\n                state.inString = false;\n                return \"string\";\n            }\n            else if (state.inParams)\n                return chain(stream, state, tokenString(ch));\n        }\n        // is it one of the special signs []{}().,;? Separator?\n        else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n            if (ch == \"(\" && beforeParams)\n                state.inParams = true;\n            else if (ch == \")\") {\n                state.inParams = false;\n                state.lastTokenWasBuiltin = true;\n            }\n            return null;\n        }\n        // start of a number value?\n        else if (/\\d/.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(/[\\w\\.]/);\n            return \"number\";\n        }\n        // multi line comment?\n        else if (ch == \"#\" && stream.eat(\"*\")) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenComment);\n        }\n        // unparsed content?\n        else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenUnparsed);\n        }\n        // single line comment?\n        else if (ch == \"#\" && stream.eat(\"#\")) {\n            state.lastTokenWasBuiltin = false;\n            stream.skipToEnd();\n            return \"comment\";\n        }\n        // variable?\n        else if (ch == \"$\") {\n            stream.eat(\"!\");\n            stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n            // is it one of the specials?\n            if (specials && specials.propertyIsEnumerable(stream.current())) {\n                return \"keyword\";\n            }\n            else {\n                state.lastTokenWasBuiltin = true;\n                state.beforeParams = true;\n                return \"builtin\";\n            }\n        }\n        // is it a operator?\n        else if (isOperatorChar.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(isOperatorChar);\n            return \"operator\";\n        }\n        else {\n            // get the whole word\n            stream.eatWhile(/[\\w\\$_{}@]/);\n            var word = stream.current();\n            // is it one of the listed keywords?\n            if (keywords && keywords.propertyIsEnumerable(word))\n                return \"keyword\";\n            // is it one of the listed functions?\n            if (functions && functions.propertyIsEnumerable(word) ||\n                    (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n                     !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n                state.beforeParams = true;\n                state.lastTokenWasBuiltin = false;\n                return \"keyword\";\n            }\n            if (state.inString) {\n                state.lastTokenWasBuiltin = false;\n                return \"string\";\n            }\n            if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n                return \"builtin\";\n            // default: just a \"word\"\n            state.lastTokenWasBuiltin = false;\n            return null;\n        }\n    }\n\n    function tokenString(quote) {\n        return function(stream, state) {\n            var escaped = false, next, end = false;\n            while ((next = stream.next()) != null) {\n                if ((next == quote) && !escaped) {\n                    end = true;\n                    break;\n                }\n                if (quote=='\"' && stream.peek() == '$' && !escaped) {\n                    state.inString = true;\n                    end = true;\n                    break;\n                }\n                escaped = !escaped && next == \"\\\\\";\n            }\n            if (end) state.tokenize = tokenBase;\n            return \"string\";\n        };\n    }\n\n    function tokenComment(stream, state) {\n        var maybeEnd = false, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            maybeEnd = (ch == \"*\");\n        }\n        return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n        var maybeEnd = 0, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd == 2) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            if (ch == \"]\")\n                maybeEnd++;\n            else if (ch != \" \")\n                maybeEnd = 0;\n        }\n        return \"meta\";\n    }\n    // Interface\n\n    return {\n        startState: function() {\n            return {\n                tokenize: tokenBase,\n                beforeParams: false,\n                inParams: false,\n                inString: false,\n                lastTokenWasBuiltin: false\n            };\n        },\n\n        token: function(stream, state) {\n            if (stream.eatSpace()) return null;\n            return state.tokenize(stream, state);\n        },\n        blockCommentStart: \"#*\",\n        blockCommentEnd: \"*#\",\n        lineComment: \"##\",\n        fold: \"velocity\"\n    };\n});\n\nCodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n\n});\n"],"sourceRoot":""}