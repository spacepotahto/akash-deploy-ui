{"version":3,"sources":["../node_modules/codemirror/mode/asn.1/asn.1.js"],"names":["CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","curPunc","indentUnit","keywords","cmipVerbs","compareTypes","status","tags","storage","modifier","accessTypes","multiLineStrings","indentStatements","isOperatorChar","tokenBase","stream","state","ch","next","tokenize","tokenString","test","eat","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","afterNext","peek","toLowerCase","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","lineComment","fold","defineMIME","name","mod","require"],"mappings":"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","file":"static/js/32.c6b9710b.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"asn.1\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        cmipVerbs = parserConfig.cmipVerbs || {},\n        compareTypes = parserConfig.compareTypes || {},\n        status = parserConfig.status || {},\n        tags = parserConfig.tags || {},\n        storage = parserConfig.storage || {},\n        modifier = parserConfig.modifier || {},\n        accessTypes = parserConfig.accessTypes|| {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|\\^]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"-\"){\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\-]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (cmipVerbs.propertyIsEnumerable(cur)) return \"variable cmipVerbs\";\n      if (compareTypes.propertyIsEnumerable(cur)) return \"atom compareTypes\";\n      if (status.propertyIsEnumerable(cur)) return \"comment status\";\n      if (tags.propertyIsEnumerable(cur)) return \"variable-3 tags\";\n      if (storage.propertyIsEnumerable(cur)) return \"builtin storage\";\n      if (modifier.propertyIsEnumerable(cur)) return \"string-2 modifier\";\n      if (accessTypes.propertyIsEnumerable(cur)) return \"atom accessTypes\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterNext = stream.peek();\n            //look if the character if the quote is like the B in '10100010'B\n            if (afterNext){\n              afterNext = afterNext.toLowerCase();\n              if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n            && curPunc != ';') || (ctx.type == \"statement\"\n            && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n        return style;\n      },\n\n      electricChars: \"{}\",\n      lineComment: \"--\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"text/x-ttcn-asn\", {\n    name: \"asn.1\",\n    keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" +\n    \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" +\n    \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" +\n    \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" +\n    \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" +\n    \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" +\n    \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" +\n    \" IMPLIED EXPORTS\"),\n    cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n    compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" +\n    \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" +\n    \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" +\n    \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" +\n    \" TEXTUAL-CONVENTION\"),\n    status: words(\"current deprecated mandatory obsolete\"),\n    tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" +\n    \" UNIVERSAL\"),\n    storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" +\n    \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" +\n    \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" +\n    \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" +\n    \" TruthValue RowStatus DisplayString GeneralString\" +\n    \" GraphicString IA5String NumericString\" +\n    \" PrintableString SnmpAdminString TeletexString\" +\n    \" UTF8String VideotexString VisibleString StringStore\" +\n    \" ISO646String T61String UniversalString Unsigned32\" +\n    \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n    modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" +\n    \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" +\n    \" DEFINED\"),\n    accessTypes: words(\"not-accessible accessible-for-notify read-only\" +\n    \" read-create read-write\"),\n    multiLineStrings: true\n  });\n});\n"],"sourceRoot":""}