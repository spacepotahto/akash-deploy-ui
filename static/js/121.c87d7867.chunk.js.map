{"version":3,"sources":["../node_modules/codemirror/mode/yacas/yacas.js"],"names":["CodeMirror","defineMode","_config","_parserConfig","words","str","obj","split","i","length","bodiedOps","pIdentifier","reFloatForm","RegExp","reIdentifier","rePattern","reFunctionLike","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","tokenComment","skipToEnd","backUp","m","match","hasOwnProperty","scopes","push","scope","currentScope","pop","end","escaped","prev","startState","token","eatSpace","indent","textAfter","Pass","delta","indentUnit","electricChars","blockCommentStart","blockCommentEnd","lineComment","defineMIME","name","mod","require"],"mappings":"gHAaG,SAASA,GACZ,aAEAA,EAAWC,WAAW,SAAS,SAASC,EAASC,GAE/C,SAASC,EAAMC,GAEb,IADA,IAAIC,EAAM,GAAIF,EAAQC,EAAIE,MAAM,KACvBC,EAAI,EAAGA,EAAIJ,EAAMK,SAAUD,EAAGF,EAAIF,EAAMI,KAAM,EACvD,OAAOF,EAGT,IAAII,EAAYN,EAAM,4RASlBO,EAAc,mCAGdC,EAAiB,IAAIC,OAJP,sDAKdC,EAAiB,IAAID,OAAOF,GAC5BI,EAAiB,IAAIF,OAAOF,EAAc,KAAOA,GACjDK,EAAiB,IAAIH,OAAOF,EAAc,WAE9C,SAASM,EAAUC,EAAQC,GACzB,IAAIC,EAMJ,GAAW,OAHXA,EAAKF,EAAOG,QAKV,OADAF,EAAMG,SAAWC,EACVJ,EAAMG,SAASJ,EAAQC,GAIhC,GAAW,MAAPC,EAAY,CACd,GAAIF,EAAOM,IAAI,KAEb,OADAL,EAAMG,SAAWG,EACVN,EAAMG,SAASJ,EAAQC,GAEhC,GAAID,EAAOM,IAAI,KAEb,OADAN,EAAOQ,YACA,UAKXR,EAAOS,OAAO,GAGd,IAAIC,EAAIV,EAAOW,MAAM,eAAe,GAC1B,OAAND,GAAclB,EAAUoB,eAAeF,EAAE,KAC3CT,EAAMY,OAAOC,KAAK,UAEpB,IAAIC,EAAQC,EAAaf,GAezB,GAbc,WAAVc,GAA6B,MAAPb,GACxBD,EAAMY,OAAOI,MAEJ,MAAPf,GAAqB,MAAPA,GAAqB,MAAPA,GAC9BD,EAAMY,OAAOC,KAAKZ,IAIN,OAFda,EAAQC,EAAaf,KAEO,MAAPC,GACP,MAAVa,GAAwB,MAAPb,GACP,MAAVa,GAAwB,MAAPb,IACnBD,EAAMY,OAAOI,MAEJ,MAAPf,EACF,KAAiB,WAAVa,GACLd,EAAMY,OAAOI,MACbF,EAAQC,EAAaf,GAKzB,OAAID,EAAOW,MAAM,UAAU,GAAM,GACxB,YAILX,EAAOW,MAAMjB,GAAa,GAAM,GAC3B,SAILM,EAAOW,MAAMd,GAAW,GAAM,GACzB,aAILG,EAAOW,MAAM,uBAAuB,GAAM,GACrC,UAILX,EAAOW,MAAMb,GAAgB,GAAM,IACrCE,EAAOS,OAAO,GACP,YAILT,EAAOW,MAAMf,GAAc,GAAM,GAC5B,aAILI,EAAOW,MAAM,gEAAgE,GAAM,GAC9E,WAIF,QAGT,SAASN,EAAYL,EAAQC,GAE3B,IADA,IAAIE,EAAMe,GAAM,EAAOC,GAAU,EACA,OAAzBhB,EAAOH,EAAOG,SAAiB,CACrC,GAAa,MAATA,IAAiBgB,EAAS,CAC5BD,GAAM,EACN,MAEFC,GAAWA,GAAoB,OAAThB,EAKxB,OAHIe,IAAQC,IACVlB,EAAMG,SAAWL,GAEZ,SAGT,SAASQ,EAAaP,EAAQC,GAE5B,IADA,IAAImB,EAAMjB,EACsB,OAAzBA,EAAOH,EAAOG,SAAiB,CACpC,GAAa,MAATiB,GAAyB,MAATjB,EAAc,CAChCF,EAAMG,SAAWL,EACjB,MAEFqB,EAAOjB,EAET,MAAO,UAGT,SAASa,EAAaf,GACpB,IAAIc,EAAQ,KAGZ,OAFId,EAAMY,OAAOtB,OAAS,IACxBwB,EAAQd,EAAMY,OAAOZ,EAAMY,OAAOtB,OAAS,IACtCwB,EAGT,MAAO,CACLM,WAAY,WACV,MAAO,CACLjB,SAAUL,EACVc,OAAQ,KAGZS,MAAO,SAAStB,EAAQC,GACtB,OAAID,EAAOuB,WAAmB,KACvBtB,EAAMG,SAASJ,EAAQC,IAEhCuB,OAAQ,SAASvB,EAAOwB,GACtB,GAAIxB,EAAMG,WAAaL,GAAgC,OAAnBE,EAAMG,SACxC,OAAOtB,EAAW4C,KAEpB,IAAIC,EAAQ,EAMZ,MALkB,MAAdF,GAAmC,OAAdA,GACP,MAAdA,GAAmC,OAAdA,GACP,OAAdA,IACFE,GAAS,IAEH1B,EAAMY,OAAOtB,OAASoC,GAAS3C,EAAQ4C,YAEjDC,cAAe,UACfC,kBAAmB,KACnBC,gBAAiB,KACjBC,YAAa,SAIjBlD,EAAWmD,WAAW,eAAgB,CACpCC,KAAM,UAhMJC,CAAIC,EAAQ","file":"static/js/121.c87d7867.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Yacas mode copyright (c) 2015 by Grzegorz Mazur\n// Loosely based on mathematica mode by Calin Barbat\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('yacas', function(_config, _parserConfig) {\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var bodiedOps = words(\"Assert BackQuote D Defun Deriv For ForEach FromFile \" +\n                        \"FromString Function Integrate InverseTaylor Limit \" +\n                        \"LocalSymbols Macro MacroRule MacroRulePattern \" +\n                        \"NIntegrate Rule RulePattern Subst TD TExplicitSum \" +\n                        \"TSum Taylor Taylor1 Taylor2 Taylor3 ToFile \" +\n                        \"ToStdout ToString TraceRule Until While\");\n\n  // patterns\n  var pFloatForm  = \"(?:(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(?:[eE][+-]?\\\\d+)?)\";\n  var pIdentifier = \"(?:[a-zA-Z\\\\$'][a-zA-Z0-9\\\\$']*)\";\n\n  // regular expressions\n  var reFloatForm    = new RegExp(pFloatForm);\n  var reIdentifier   = new RegExp(pIdentifier);\n  var rePattern      = new RegExp(pIdentifier + \"?_\" + pIdentifier);\n  var reFunctionLike = new RegExp(pIdentifier + \"\\\\s*\\\\(\");\n\n  function tokenBase(stream, state) {\n    var ch;\n\n    // get next character\n    ch = stream.next();\n\n    // string\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n\n    // comment\n    if (ch === '/') {\n      if (stream.eat('*')) {\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n\n    // go back one character\n    stream.backUp(1);\n\n    // update scope info\n    var m = stream.match(/^(\\w+)\\s*\\(/, false);\n    if (m !== null && bodiedOps.hasOwnProperty(m[1]))\n      state.scopes.push('bodied');\n\n    var scope = currentScope(state);\n\n    if (scope === 'bodied' && ch === '[')\n      state.scopes.pop();\n\n    if (ch === '[' || ch === '{' || ch === '(')\n      state.scopes.push(ch);\n\n    scope = currentScope(state);\n\n    if (scope === '[' && ch === ']' ||\n        scope === '{' && ch === '}' ||\n        scope === '(' && ch === ')')\n      state.scopes.pop();\n\n    if (ch === ';') {\n      while (scope === 'bodied') {\n        state.scopes.pop();\n        scope = currentScope(state);\n      }\n    }\n\n    // look for ordered rules\n    if (stream.match(/\\d+ *#/, true, false)) {\n      return 'qualifier';\n    }\n\n    // look for numbers\n    if (stream.match(reFloatForm, true, false)) {\n      return 'number';\n    }\n\n    // look for placeholders\n    if (stream.match(rePattern, true, false)) {\n      return 'variable-3';\n    }\n\n    // match all braces separately\n    if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n      return 'bracket';\n    }\n\n    // literals looking like function calls\n    if (stream.match(reFunctionLike, true, false)) {\n      stream.backUp(1);\n      return 'variable';\n    }\n\n    // all other identifiers\n    if (stream.match(reIdentifier, true, false)) {\n      return 'variable-2';\n    }\n\n    // operators; note that operators like @@ or /; are matched separately for each symbol.\n    if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%|#)/, true, false)) {\n      return 'operator';\n    }\n\n    // everything else is an error\n    return 'error';\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while((next = stream.next()) != null) {\n      if (prev === '*' && next === '/') {\n        state.tokenize = tokenBase;\n        break;\n      }\n      prev = next;\n    }\n    return 'comment';\n  }\n\n  function currentScope(state) {\n    var scope = null;\n    if (state.scopes.length > 0)\n      scope = state.scopes[state.scopes.length - 1];\n    return scope;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: []\n      };\n    },\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n    indent: function(state, textAfter) {\n      if (state.tokenize !== tokenBase && state.tokenize !== null)\n        return CodeMirror.Pass;\n\n      var delta = 0;\n      if (textAfter === ']' || textAfter === '];' ||\n          textAfter === '}' || textAfter === '};' ||\n          textAfter === ');')\n        delta = -1;\n\n      return (state.scopes.length + delta) * _config.indentUnit;\n    },\n    electricChars: \"{}[]();\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-yacas', {\n  name: 'yacas'\n});\n\n});\n"],"sourceRoot":""}