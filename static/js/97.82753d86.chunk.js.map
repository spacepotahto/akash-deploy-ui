{"version":3,"sources":["../node_modules/codemirror/mode/smarty/smarty.js"],"names":["CodeMirror","defineMode","config","parserConf","last","rightDelimiter","leftDelimiter","version","baseMode","getMode","keyFunctions","regs","operatorChars","validIdentifier","stringChar","cont","style","lastType","chain","stream","state","parser","tokenize","doesNotCount","pos","string","length","test","charAt","tokenTop","scan","nextMatch","indexOf","match","eat","tokenBlock","depth","tokenSmarty","slice","token","base","ch","next","eatWhile","tokenAttribute","str","c","i","j","quote","prevChar","currChar","eol","peek","terminator","startState","copyState","innerMode","mode","indent","text","line","Pass","blockCommentStart","blockCommentEnd","defineMIME","mod","require"],"mappings":"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","file":"static/js/97.82753d86.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Smarty 2 and 3 mode.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"smarty\", function(config, parserConf) {\n    var rightDelimiter = parserConf.rightDelimiter || \"}\";\n    var leftDelimiter = parserConf.leftDelimiter || \"{\";\n    var version = parserConf.version || 2;\n    var baseMode = CodeMirror.getMode(config, parserConf.baseMode || \"null\");\n\n    var keyFunctions = [\"debug\", \"extends\", \"function\", \"include\", \"literal\"];\n    var regs = {\n      operatorChars: /[+\\-*&%=<>!?]/,\n      validIdentifier: /[a-zA-Z0-9_]/,\n      stringChar: /['\"]/\n    };\n\n    var last;\n    function cont(style, lastType) {\n      last = lastType;\n      return style;\n    }\n\n    function chain(stream, state, parser) {\n      state.tokenize = parser;\n      return parser(stream, state);\n    }\n\n    // Smarty 3 allows { and } surrounded by whitespace to NOT slip into Smarty mode\n    function doesNotCount(stream, pos) {\n      if (pos == null) pos = stream.pos;\n      return version === 3 && leftDelimiter == \"{\" &&\n        (pos == stream.string.length || /\\s/.test(stream.string.charAt(pos)));\n    }\n\n    function tokenTop(stream, state) {\n      var string = stream.string;\n      for (var scan = stream.pos;;) {\n        var nextMatch = string.indexOf(leftDelimiter, scan);\n        scan = nextMatch + leftDelimiter.length;\n        if (nextMatch == -1 || !doesNotCount(stream, nextMatch + leftDelimiter.length)) break;\n      }\n      if (nextMatch == stream.pos) {\n        stream.match(leftDelimiter);\n        if (stream.eat(\"*\")) {\n          return chain(stream, state, tokenBlock(\"comment\", \"*\" + rightDelimiter));\n        } else {\n          state.depth++;\n          state.tokenize = tokenSmarty;\n          last = \"startTag\";\n          return \"tag\";\n        }\n      }\n\n      if (nextMatch > -1) stream.string = string.slice(0, nextMatch);\n      var token = baseMode.token(stream, state.base);\n      if (nextMatch > -1) stream.string = string;\n      return token;\n    }\n\n    // parsing Smarty content\n    function tokenSmarty(stream, state) {\n      if (stream.match(rightDelimiter, true)) {\n        if (version === 3) {\n          state.depth--;\n          if (state.depth <= 0) {\n            state.tokenize = tokenTop;\n          }\n        } else {\n          state.tokenize = tokenTop;\n        }\n        return cont(\"tag\", null);\n      }\n\n      if (stream.match(leftDelimiter, true)) {\n        state.depth++;\n        return cont(\"tag\", \"startTag\");\n      }\n\n      var ch = stream.next();\n      if (ch == \"$\") {\n        stream.eatWhile(regs.validIdentifier);\n        return cont(\"variable-2\", \"variable\");\n      } else if (ch == \"|\") {\n        return cont(\"operator\", \"pipe\");\n      } else if (ch == \".\") {\n        return cont(\"operator\", \"property\");\n      } else if (regs.stringChar.test(ch)) {\n        state.tokenize = tokenAttribute(ch);\n        return cont(\"string\", \"string\");\n      } else if (regs.operatorChars.test(ch)) {\n        stream.eatWhile(regs.operatorChars);\n        return cont(\"operator\", \"operator\");\n      } else if (ch == \"[\" || ch == \"]\") {\n        return cont(\"bracket\", \"bracket\");\n      } else if (ch == \"(\" || ch == \")\") {\n        return cont(\"bracket\", \"operator\");\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/\\d/);\n        return cont(\"number\", \"number\");\n      } else {\n\n        if (state.last == \"variable\") {\n          if (ch == \"@\") {\n            stream.eatWhile(regs.validIdentifier);\n            return cont(\"property\", \"property\");\n          } else if (ch == \"|\") {\n            stream.eatWhile(regs.validIdentifier);\n            return cont(\"qualifier\", \"modifier\");\n          }\n        } else if (state.last == \"pipe\") {\n          stream.eatWhile(regs.validIdentifier);\n          return cont(\"qualifier\", \"modifier\");\n        } else if (state.last == \"whitespace\") {\n          stream.eatWhile(regs.validIdentifier);\n          return cont(\"attribute\", \"modifier\");\n        } if (state.last == \"property\") {\n          stream.eatWhile(regs.validIdentifier);\n          return cont(\"property\", null);\n        } else if (/\\s/.test(ch)) {\n          last = \"whitespace\";\n          return null;\n        }\n\n        var str = \"\";\n        if (ch != \"/\") {\n          str += ch;\n        }\n        var c = null;\n        while (c = stream.eat(regs.validIdentifier)) {\n          str += c;\n        }\n        for (var i=0, j=keyFunctions.length; i<j; i++) {\n          if (keyFunctions[i] == str) {\n            return cont(\"keyword\", \"keyword\");\n          }\n        }\n        if (/\\s/.test(ch)) {\n          return null;\n        }\n        return cont(\"tag\", \"tag\");\n      }\n    }\n\n    function tokenAttribute(quote) {\n      return function(stream, state) {\n        var prevChar = null;\n        var currChar = null;\n        while (!stream.eol()) {\n          currChar = stream.peek();\n          if (stream.next() == quote && prevChar !== '\\\\') {\n            state.tokenize = tokenSmarty;\n            break;\n          }\n          prevChar = currChar;\n        }\n        return \"string\";\n      };\n    }\n\n    function tokenBlock(style, terminator) {\n      return function(stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = tokenTop;\n            break;\n          }\n          stream.next();\n        }\n        return style;\n      };\n    }\n\n    return {\n      startState: function() {\n        return {\n          base: CodeMirror.startState(baseMode),\n          tokenize: tokenTop,\n          last: null,\n          depth: 0\n        };\n      },\n      copyState: function(state) {\n        return {\n          base: CodeMirror.copyState(baseMode, state.base),\n          tokenize: state.tokenize,\n          last: state.last,\n          depth: state.depth\n        };\n      },\n      innerMode: function(state) {\n        if (state.tokenize == tokenTop)\n          return {mode: baseMode, state: state.base};\n      },\n      token: function(stream, state) {\n        var style = state.tokenize(stream, state);\n        state.last = last;\n        return style;\n      },\n      indent: function(state, text, line) {\n        if (state.tokenize == tokenTop && baseMode.indent)\n          return baseMode.indent(state.base, text, line);\n        else\n          return CodeMirror.Pass;\n      },\n      blockCommentStart: leftDelimiter + \"*\",\n      blockCommentEnd: \"*\" + rightDelimiter\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-smarty\", \"smarty\");\n});\n"],"sourceRoot":""}