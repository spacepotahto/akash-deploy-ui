{"version":3,"sources":["../node_modules/codemirror/mode/yaml/yaml.js","../node_modules/codemirror/mode/yaml-frontmatter/yaml-frontmatter.js"],"names":["CodeMirror","defineMode","keywordRegex","RegExp","join","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","lineComment","fold","defineMIME","mod","require","START","FRONTMATTER","BODY","config","parserConfig","yamlMode","getMode","innerMode","base","curMode","inner","copyState","end","style","mode","indent","a","b","Pass","blankLine"],"mappings":"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","file":"static/js/29.3af852ad.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"yaml\", function() {\n\n  var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n  var keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\n  return {\n    token: function(stream, state) {\n      var ch = stream.peek();\n      var esc = state.escaped;\n      state.escaped = false;\n      /* comments */\n      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n        return \"string\";\n\n      if (state.literal && stream.indentation() > state.keyCol) {\n        stream.skipToEnd(); return \"string\";\n      } else if (state.literal) { state.literal = false; }\n      if (stream.sol()) {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        /* document start */\n        if(stream.match('---')) { return \"def\"; }\n        /* document end */\n        if (stream.match('...')) { return \"def\"; }\n        /* array list item */\n        if (stream.match(/\\s*-\\s+/)) { return 'meta'; }\n      }\n      /* inline pairs/lists */\n      if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n        if (ch == '{')\n          state.inlinePairs++;\n        else if (ch == '}')\n          state.inlinePairs--;\n        else if (ch == '[')\n          state.inlineList++;\n        else\n          state.inlineList--;\n        return 'meta';\n      }\n\n      /* list separator */\n      if (state.inlineList > 0 && !esc && ch == ',') {\n        stream.next();\n        return 'meta';\n      }\n      /* pairs separator */\n      if (state.inlinePairs > 0 && !esc && ch == ',') {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        stream.next();\n        return 'meta';\n      }\n\n      /* start of value of a pair */\n      if (state.pairStart) {\n        /* block literals */\n        if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n        /* references */\n        if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable-2'; }\n        /* numbers */\n        if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n        if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n        /* keywords */\n        if (stream.match(keywordRegex)) { return 'keyword'; }\n      }\n\n      /* pairs (associative arrays) -> key */\n      if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n        state.pair = true;\n        state.keyCol = stream.indentation();\n        return \"atom\";\n      }\n      if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n      /* nothing found, continue */\n      state.pairStart = false;\n      state.escaped = (ch == '\\\\');\n      stream.next();\n      return null;\n    },\n    startState: function() {\n      return {\n        pair: false,\n        pairStart: false,\n        keyCol: 0,\n        inlinePairs: 0,\n        inlineList: 0,\n        literal: false,\n        escaped: false\n      };\n    },\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\nCodeMirror.defineMIME(\"text/yaml\", \"yaml\");\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../yaml/yaml\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../yaml/yaml\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n\n  var START = 0, FRONTMATTER = 1, BODY = 2\n\n  // a mixed mode for Markdown text with an optional YAML front matter\n  CodeMirror.defineMode(\"yaml-frontmatter\", function (config, parserConfig) {\n    var yamlMode = CodeMirror.getMode(config, \"yaml\")\n    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"gfm\")\n\n    function curMode(state) {\n      return state.state == BODY ? innerMode : yamlMode\n    }\n\n    return {\n      startState: function () {\n        return {\n          state: START,\n          inner: CodeMirror.startState(yamlMode)\n        }\n      },\n      copyState: function (state) {\n        return {\n          state: state.state,\n          inner: CodeMirror.copyState(curMode(state), state.inner)\n        }\n      },\n      token: function (stream, state) {\n        if (state.state == START) {\n          if (stream.match('---', false)) {\n            state.state = FRONTMATTER\n            return yamlMode.token(stream, state.inner)\n          } else {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n            return innerMode.token(stream, state.inner)\n          }\n        } else if (state.state == FRONTMATTER) {\n          var end = stream.sol() && stream.match(/(---|\\.\\.\\.)/, false)\n          var style = yamlMode.token(stream, state.inner)\n          if (end) {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n          }\n          return style\n        } else {\n          return innerMode.token(stream, state.inner)\n        }\n      },\n      innerMode: function (state) {\n        return {mode: curMode(state), state: state.inner}\n      },\n      indent: function(state, a, b) {\n        var mode = curMode(state)\n        return mode.indent ? mode.indent(state.inner, a, b) : CodeMirror.Pass\n      },\n      blankLine: function (state) {\n        var mode = curMode(state)\n        if (mode.blankLine) return mode.blankLine(state.inner)\n      }\n    }\n  })\n});\n"],"sourceRoot":""}