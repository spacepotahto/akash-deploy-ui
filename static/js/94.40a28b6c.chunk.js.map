{"version":3,"sources":["../node_modules/codemirror/mode/shell/shell.js"],"names":["CodeMirror","defineMode","words","define","style","dict","i","length","commonAtoms","commonKeywords","commonCommands","tokenBase","stream","state","eatSpace","sol","ch","next","tokens","unshift","tokenString","tokenize","eat","skipToEnd","tokenDollar","eatWhile","match","heredoc","tokenHeredoc","test","eol","peek","cur","current","hasOwnProperty","quote","close","escaped","shift","backUp","tokenStringStart","registerHelper","concat","delim","string","startState","token","closeBrackets","lineComment","fold","defineMIME","mod","require"],"mappings":"+GAUG,SAASA,GACZ,aAEAA,EAAWC,WAAW,SAAS,WAE7B,IAAIC,EAAQ,GACZ,SAASC,EAAOC,EAAOC,GACrB,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAC9BJ,EAAMG,EAAKC,IAAMF,EAIrB,IAAII,EAAc,CAAC,OAAQ,SACvBC,EAAiB,CAAC,KAAM,OAAQ,KAAM,OAAQ,OAAQ,QAAS,QAAS,MAAO,KAAM,OAAQ,KAC/F,MAAO,MAAO,OAAQ,OAAQ,MAAO,QAAS,SAAU,YACtDC,EAAiB,CAAC,KAAM,MAAO,OAAQ,OAAQ,MAAO,KAAM,KAAM,QAAS,QAAS,SAAU,QAChG,KAAM,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,MAAO,MAAO,MAAO,OAAQ,KAAM,OAAQ,UAChG,KAAM,KAAM,OAAQ,QAAS,UAAW,KAAM,KAAM,KAAM,OAAQ,MAAO,OAAQ,KAAM,UAAW,KAClG,QAAS,MAAO,UAAW,KAAM,QAAS,QAAS,SAAU,OAAQ,QAAS,MAAO,QAAS,OAC9F,KAAM,OAAQ,MAAO,MAAO,SAAU,MAAO,QAAS,KAAM,MAAO,OAAQ,KAAM,OAAQ,MAAO,QAChG,MAAO,OAQT,SAASC,EAAUC,EAAQC,GACzB,GAAID,EAAOE,WAAY,OAAO,KAE9B,IAAIC,EAAMH,EAAOG,MACbC,EAAKJ,EAAOK,OAEhB,GAAW,OAAPD,EAEF,OADAJ,EAAOK,OACA,KAET,GAAW,MAAPD,GAAsB,MAAPA,GAAqB,MAAPA,EAE/B,OADAH,EAAMK,OAAOC,QAAQC,EAAYJ,EAAW,MAAPA,EAAa,QAAU,WACrDK,EAAST,EAAQC,GAE1B,GAAW,MAAPG,EACF,OAAID,GAAOH,EAAOU,IAAI,MACpBV,EAAOW,YACA,SAETX,EAAOW,YACA,WAET,GAAW,MAAPP,EAEF,OADAH,EAAMK,OAAOC,QAAQK,GACdH,EAAST,EAAQC,GAE1B,GAAW,MAAPG,GAAqB,MAAPA,EAChB,MAAO,WAET,GAAW,MAAPA,EAGF,OAFAJ,EAAOU,IAAI,KACXV,EAAOa,SAAS,MACT,YAET,GAAU,KAANT,EAAW,CACb,GAAIJ,EAAOc,MAAM,MAAO,MAAO,WAC/B,IAAIC,EAAUf,EAAOc,MAAM,6BAC3B,GAAIC,EAEF,OADAd,EAAMK,OAAOC,QAAQS,EAAaD,EAAQ,KACnC,WAGX,GAAI,KAAKE,KAAKb,KACZJ,EAAOa,SAAS,MACbb,EAAOkB,QAAU,KAAKD,KAAKjB,EAAOmB,SACnC,MAAO,SAGXnB,EAAOa,SAAS,SAChB,IAAIO,EAAMpB,EAAOqB,UACjB,MAAsB,MAAlBrB,EAAOmB,QAAkB,MAAMF,KAAKG,GAAa,MAC9C9B,EAAMgC,eAAeF,GAAO9B,EAAM8B,GAAO,KAGlD,SAASZ,EAAYe,EAAO/B,GAC1B,IAAIgC,EAAiB,KAATD,EAAe,IAAe,KAATA,EAAe,IAAMA,EACtD,OAAO,SAASvB,EAAQC,GAEtB,IADA,IAAII,EAAMoB,GAAU,EACa,OAAzBpB,EAAOL,EAAOK,SAAiB,CACrC,GAAIA,IAASmB,IAAUC,EAAS,CAC9BxB,EAAMK,OAAOoB,QACb,MACK,GAAa,MAATrB,IAAiBoB,GAAqB,MAAVF,GAAiBvB,EAAOmB,QAAUK,EAAO,CAC9EC,GAAU,EACVzB,EAAO2B,OAAO,GACd1B,EAAMK,OAAOC,QAAQK,GACrB,MACK,IAAKa,GAAWF,IAAUC,GAASnB,IAASkB,EAEjD,OADAtB,EAAMK,OAAOC,QAAQC,EAAYe,EAAO/B,IACjCiB,EAAST,EAAQC,GACnB,IAAKwB,GAAW,OAAOR,KAAKZ,KAAU,OAAOY,KAAKM,GAAQ,CAC/DtB,EAAMK,OAAOC,QAAQqB,EAAiBvB,EAAM,WAC5CL,EAAO2B,OAAO,GACd,MAEFF,GAAWA,GAAoB,OAATpB,EAExB,OAAOb,GAIX,SAASoC,EAAiBL,EAAO/B,GAC/B,OAAO,SAASQ,EAAQC,GAGtB,OAFAA,EAAMK,OAAO,GAAKE,EAAYe,EAAO/B,GACrCQ,EAAOK,OACAI,EAAST,EAAQC,IA3F5Bb,EAAWyC,eAAe,YAAa,QAASjC,EAAYkC,OAAOjC,EAAgBC,IAEnFP,EAAO,OAAQK,GACfL,EAAO,UAAWM,GAClBN,EAAO,UAAWO,GA2FlB,IAAIc,EAAc,SAASZ,EAAQC,GAC7BA,EAAMK,OAAOX,OAAS,GAAGK,EAAOU,IAAI,KACxC,IAAIN,EAAKJ,EAAOK,OAChB,MAAI,SAASY,KAAKb,IAChBH,EAAMK,OAAO,GAAKE,EAAYJ,EAAU,KAANA,EAAY,QAAgB,KAANA,EAAY,MAAQ,UACrEK,EAAST,EAAQC,KAErB,KAAKgB,KAAKb,IAAKJ,EAAOa,SAAS,MACpCZ,EAAMK,OAAOoB,QACN,QAGT,SAASV,EAAae,GACpB,OAAO,SAAS/B,EAAQC,GAGtB,OAFID,EAAOG,OAASH,EAAOgC,QAAUD,GAAO9B,EAAMK,OAAOoB,QACzD1B,EAAOW,YACA,YAIX,SAASF,EAAST,EAAQC,GACxB,OAAQA,EAAMK,OAAO,IAAMP,GAAYC,EAAQC,GAGjD,MAAO,CACLgC,WAAY,WAAY,MAAO,CAAC3B,OAAO,KACvC4B,MAAO,SAASlC,EAAQC,GACtB,OAAOQ,EAAST,EAAQC,IAE1BkC,cAAe,iBACfC,YAAa,IACbC,KAAM,YAIVjD,EAAWkD,WAAW,YAAa,SAGnClD,EAAWkD,WAAW,mBAAoB,SAhKtCC,CAAIC,EAAQ","file":"static/js/94.40a28b6c.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('shell', function() {\n\n  var words = {};\n  function define(style, dict) {\n    for(var i = 0; i < dict.length; i++) {\n      words[dict[i]] = style;\n    }\n  };\n\n  var commonAtoms = [\"true\", \"false\"];\n  var commonKeywords = [\"if\", \"then\", \"do\", \"else\", \"elif\", \"while\", \"until\", \"for\", \"in\", \"esac\", \"fi\",\n    \"fin\", \"fil\", \"done\", \"exit\", \"set\", \"unset\", \"export\", \"function\"];\n  var commonCommands = [\"ab\", \"awk\", \"bash\", \"beep\", \"cat\", \"cc\", \"cd\", \"chown\", \"chmod\", \"chroot\", \"clear\",\n    \"cp\", \"curl\", \"cut\", \"diff\", \"echo\", \"find\", \"gawk\", \"gcc\", \"get\", \"git\", \"grep\", \"hg\", \"kill\", \"killall\",\n    \"ln\", \"ls\", \"make\", \"mkdir\", \"openssl\", \"mv\", \"nc\", \"nl\", \"node\", \"npm\", \"ping\", \"ps\", \"restart\", \"rm\",\n    \"rmdir\", \"sed\", \"service\", \"sh\", \"shopt\", \"shred\", \"source\", \"sort\", \"sleep\", \"ssh\", \"start\", \"stop\",\n    \"su\", \"sudo\", \"svn\", \"tee\", \"telnet\", \"top\", \"touch\", \"vi\", \"vim\", \"wall\", \"wc\", \"wget\", \"who\", \"write\",\n    \"yes\", \"zsh\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"shell\", commonAtoms.concat(commonKeywords, commonCommands));\n\n  define('atom', commonAtoms);\n  define('keyword', commonKeywords);\n  define('builtin', commonCommands);\n\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) return null;\n\n    var sol = stream.sol();\n    var ch = stream.next();\n\n    if (ch === '\\\\') {\n      stream.next();\n      return null;\n    }\n    if (ch === '\\'' || ch === '\"' || ch === '`') {\n      state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n      return tokenize(stream, state);\n    }\n    if (ch === '#') {\n      if (sol && stream.eat('!')) {\n        stream.skipToEnd();\n        return 'meta'; // 'comment'?\n      }\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (ch === '$') {\n      state.tokens.unshift(tokenDollar);\n      return tokenize(stream, state);\n    }\n    if (ch === '+' || ch === '=') {\n      return 'operator';\n    }\n    if (ch === '-') {\n      stream.eat('-');\n      stream.eatWhile(/\\w/);\n      return 'attribute';\n    }\n    if (ch == \"<\") {\n      if (stream.match(\"<<\")) return \"operator\"\n      var heredoc = stream.match(/^<-?\\s*['\"]?([^'\"]*)['\"]?/)\n      if (heredoc) {\n        state.tokens.unshift(tokenHeredoc(heredoc[1]))\n        return 'string-2'\n      }\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/\\d/);\n      if(stream.eol() || !/\\w/.test(stream.peek())) {\n        return 'number';\n      }\n    }\n    stream.eatWhile(/[\\w-]/);\n    var cur = stream.current();\n    if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n    return words.hasOwnProperty(cur) ? words[cur] : null;\n  }\n\n  function tokenString(quote, style) {\n    var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote\n    return function(stream, state) {\n      var next, escaped = false;\n      while ((next = stream.next()) != null) {\n        if (next === close && !escaped) {\n          state.tokens.shift();\n          break;\n        } else if (next === '$' && !escaped && quote !== \"'\" && stream.peek() != close) {\n          escaped = true;\n          stream.backUp(1);\n          state.tokens.unshift(tokenDollar);\n          break;\n        } else if (!escaped && quote !== close && next === quote) {\n          state.tokens.unshift(tokenString(quote, style))\n          return tokenize(stream, state)\n        } else if (!escaped && /['\"]/.test(next) && !/['\"]/.test(quote)) {\n          state.tokens.unshift(tokenStringStart(next, \"string\"));\n          stream.backUp(1);\n          break;\n        }\n        escaped = !escaped && next === '\\\\';\n      }\n      return style;\n    };\n  };\n\n  function tokenStringStart(quote, style) {\n    return function(stream, state) {\n      state.tokens[0] = tokenString(quote, style)\n      stream.next()\n      return tokenize(stream, state)\n    }\n  }\n\n  var tokenDollar = function(stream, state) {\n    if (state.tokens.length > 1) stream.eat('$');\n    var ch = stream.next()\n    if (/['\"({]/.test(ch)) {\n      state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n      return tokenize(stream, state);\n    }\n    if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n    state.tokens.shift();\n    return 'def';\n  };\n\n  function tokenHeredoc(delim) {\n    return function(stream, state) {\n      if (stream.sol() && stream.string == delim) state.tokens.shift()\n      stream.skipToEnd()\n      return \"string-2\"\n    }\n  }\n\n  function tokenize(stream, state) {\n    return (state.tokens[0] || tokenBase) (stream, state);\n  };\n\n  return {\n    startState: function() {return {tokens:[]};},\n    token: function(stream, state) {\n      return tokenize(stream, state);\n    },\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    lineComment: '#',\n    fold: \"brace\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-sh', 'shell');\n// Apache uses a slightly different Media Type for Shell scripts\n// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\nCodeMirror.defineMIME('application/x-sh', 'shell');\n\n});\n"],"sourceRoot":""}