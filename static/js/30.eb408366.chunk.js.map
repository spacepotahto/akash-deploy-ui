{"version":3,"sources":["../node_modules/codemirror/mode/apl/apl.js"],"names":["CodeMirror","defineMode","builtInOps","builtInFuncs","isOperator","isNiladic","isFunction","isArrow","isComment","stringEater","type","prev","c","startState","func","op","string","escape","token","stream","state","ch","funcName","eatSpace","next","eatWhile","test","skipToEnd","peek","defineMIME","mod","require"],"mappings":"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","file":"static/js/30.eb408366.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"apl\", function() {\n  var builtInOps = {\n    \".\": \"innerProduct\",\n    \"\\\\\": \"scan\",\n    \"/\": \"reduce\",\n    \"⌿\": \"reduce1Axis\",\n    \"⍀\": \"scan1Axis\",\n    \"¨\": \"each\",\n    \"⍣\": \"power\"\n  };\n  var builtInFuncs = {\n    \"+\": [\"conjugate\", \"add\"],\n    \"−\": [\"negate\", \"subtract\"],\n    \"×\": [\"signOf\", \"multiply\"],\n    \"÷\": [\"reciprocal\", \"divide\"],\n    \"⌈\": [\"ceiling\", \"greaterOf\"],\n    \"⌊\": [\"floor\", \"lesserOf\"],\n    \"∣\": [\"absolute\", \"residue\"],\n    \"⍳\": [\"indexGenerate\", \"indexOf\"],\n    \"?\": [\"roll\", \"deal\"],\n    \"⋆\": [\"exponentiate\", \"toThePowerOf\"],\n    \"⍟\": [\"naturalLog\", \"logToTheBase\"],\n    \"○\": [\"piTimes\", \"circularFuncs\"],\n    \"!\": [\"factorial\", \"binomial\"],\n    \"⌹\": [\"matrixInverse\", \"matrixDivide\"],\n    \"<\": [null, \"lessThan\"],\n    \"≤\": [null, \"lessThanOrEqual\"],\n    \"=\": [null, \"equals\"],\n    \">\": [null, \"greaterThan\"],\n    \"≥\": [null, \"greaterThanOrEqual\"],\n    \"≠\": [null, \"notEqual\"],\n    \"≡\": [\"depth\", \"match\"],\n    \"≢\": [null, \"notMatch\"],\n    \"∈\": [\"enlist\", \"membership\"],\n    \"⍷\": [null, \"find\"],\n    \"∪\": [\"unique\", \"union\"],\n    \"∩\": [null, \"intersection\"],\n    \"∼\": [\"not\", \"without\"],\n    \"∨\": [null, \"or\"],\n    \"∧\": [null, \"and\"],\n    \"⍱\": [null, \"nor\"],\n    \"⍲\": [null, \"nand\"],\n    \"⍴\": [\"shapeOf\", \"reshape\"],\n    \",\": [\"ravel\", \"catenate\"],\n    \"⍪\": [null, \"firstAxisCatenate\"],\n    \"⌽\": [\"reverse\", \"rotate\"],\n    \"⊖\": [\"axis1Reverse\", \"axis1Rotate\"],\n    \"⍉\": [\"transpose\", null],\n    \"↑\": [\"first\", \"take\"],\n    \"↓\": [null, \"drop\"],\n    \"⊂\": [\"enclose\", \"partitionWithAxis\"],\n    \"⊃\": [\"diclose\", \"pick\"],\n    \"⌷\": [null, \"index\"],\n    \"⍋\": [\"gradeUp\", null],\n    \"⍒\": [\"gradeDown\", null],\n    \"⊤\": [\"encode\", null],\n    \"⊥\": [\"decode\", null],\n    \"⍕\": [\"format\", \"formatByExample\"],\n    \"⍎\": [\"execute\", null],\n    \"⊣\": [\"stop\", \"left\"],\n    \"⊢\": [\"pass\", \"right\"]\n  };\n\n  var isOperator = /[\\.\\/⌿⍀¨⍣]/;\n  var isNiladic = /⍬/;\n  var isFunction = /[\\+−×÷⌈⌊∣⍳\\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;\n  var isArrow = /←/;\n  var isComment = /[⍝#].*$/;\n\n  var stringEater = function(type) {\n    var prev;\n    prev = false;\n    return function(c) {\n      prev = c;\n      if (c === type) {\n        return prev === \"\\\\\";\n      }\n      return true;\n    };\n  };\n  return {\n    startState: function() {\n      return {\n        prev: false,\n        func: false,\n        op: false,\n        string: false,\n        escape: false\n      };\n    },\n    token: function(stream, state) {\n      var ch, funcName;\n      if (stream.eatSpace()) {\n        return null;\n      }\n      ch = stream.next();\n      if (ch === '\"' || ch === \"'\") {\n        stream.eatWhile(stringEater(ch));\n        stream.next();\n        state.prev = true;\n        return \"string\";\n      }\n      if (/[\\[{\\(]/.test(ch)) {\n        state.prev = false;\n        return null;\n      }\n      if (/[\\]}\\)]/.test(ch)) {\n        state.prev = true;\n        return null;\n      }\n      if (isNiladic.test(ch)) {\n        state.prev = false;\n        return \"niladic\";\n      }\n      if (/[¯\\d]/.test(ch)) {\n        if (state.func) {\n          state.func = false;\n          state.prev = false;\n        } else {\n          state.prev = true;\n        }\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperator.test(ch)) {\n        return \"operator apl-\" + builtInOps[ch];\n      }\n      if (isArrow.test(ch)) {\n        return \"apl-arrow\";\n      }\n      if (isFunction.test(ch)) {\n        funcName = \"apl-\";\n        if (builtInFuncs[ch] != null) {\n          if (state.prev) {\n            funcName += builtInFuncs[ch][1];\n          } else {\n            funcName += builtInFuncs[ch][0];\n          }\n        }\n        state.func = true;\n        state.prev = false;\n        return \"function \" + funcName;\n      }\n      if (isComment.test(ch)) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (ch === \"∘\" && stream.peek() === \".\") {\n        stream.next();\n        return \"function jot-dot\";\n      }\n      stream.eatWhile(/[\\w\\$_]/);\n      state.prev = true;\n      return \"keyword\";\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/apl\", \"apl\");\n\n});\n"],"sourceRoot":""}