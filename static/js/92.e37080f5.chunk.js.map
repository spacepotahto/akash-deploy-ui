{"version":3,"sources":["../node_modules/codemirror/mode/sass/sass.js"],"names":["CodeMirror","defineMode","config","cssMode","mimeModes","propertyKeywords","colorKeywords","valueKeywords","fontProperties","tokenRegexp","words","RegExp","join","word","keywordsRegexp","opRegexp","pseudoElementsRegexp","isEndLine","stream","peek","match","urlTokens","state","ch","next","tokenizer","tokenBase","eatSpace","buildStringTokenizer","comment","indentation","multiLine","sol","skipTo","skipToEnd","quote","greedy","stringTokenizer","nextChar","peekChar","previousChar","string","charAt","pos","cursorHalf","buildInterpolationTokenizer","currentTokenizer","indent","indentCount","currentOffset","scopes","offset","indentUnit","unshift","dedent","length","shift","eatWhile","current","toLowerCase","hasOwnProperty","prevProp","prop","tokenLexer","style","withCurrentIndent","newScopes","i","scope","push","startState","type","definedVars","definedMixins","token","lastToken","content","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME","mod","require"],"mappings":"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","file":"static/js/92.e37080f5.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../css/css\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../css/css\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sass\", function(config) {\n  var cssMode = CodeMirror.mimeModes[\"text/css\"];\n  var propertyKeywords = cssMode.propertyKeywords || {},\n      colorKeywords = cssMode.colorKeywords || {},\n      valueKeywords = cssMode.valueKeywords || {},\n      fontProperties = cssMode.fontProperties || {};\n\n  function tokenRegexp(words) {\n    return new RegExp(\"^\" + words.join(\"|\"));\n  }\n\n  var keywords = [\"true\", \"false\", \"null\", \"auto\"];\n  var keywordsRegexp = new RegExp(\"^\" + keywords.join(\"|\"));\n\n  var operators = [\"\\\\(\", \"\\\\)\", \"=\", \">\", \"<\", \"==\", \">=\", \"<=\", \"\\\\+\", \"-\",\n                   \"\\\\!=\", \"/\", \"\\\\*\", \"%\", \"and\", \"or\", \"not\", \";\",\"\\\\{\",\"\\\\}\",\":\"];\n  var opRegexp = tokenRegexp(operators);\n\n  var pseudoElementsRegexp = /^::?[a-zA-Z_][\\w\\-]*/;\n\n  var word;\n\n  function isEndLine(stream) {\n    return !stream.peek() || stream.match(/\\s+$/, false);\n  }\n\n  function urlTokens(stream, state) {\n    var ch = stream.peek();\n\n    if (ch === \")\") {\n      stream.next();\n      state.tokenizer = tokenBase;\n      return \"operator\";\n    } else if (ch === \"(\") {\n      stream.next();\n      stream.eatSpace();\n\n      return \"operator\";\n    } else if (ch === \"'\" || ch === '\"') {\n      state.tokenizer = buildStringTokenizer(stream.next());\n      return \"string\";\n    } else {\n      state.tokenizer = buildStringTokenizer(\")\", false);\n      return \"string\";\n    }\n  }\n  function comment(indentation, multiLine) {\n    return function(stream, state) {\n      if (stream.sol() && stream.indentation() <= indentation) {\n        state.tokenizer = tokenBase;\n        return tokenBase(stream, state);\n      }\n\n      if (multiLine && stream.skipTo(\"*/\")) {\n        stream.next();\n        stream.next();\n        state.tokenizer = tokenBase;\n      } else {\n        stream.skipToEnd();\n      }\n\n      return \"comment\";\n    };\n  }\n\n  function buildStringTokenizer(quote, greedy) {\n    if (greedy == null) { greedy = true; }\n\n    function stringTokenizer(stream, state) {\n      var nextChar = stream.next();\n      var peekChar = stream.peek();\n      var previousChar = stream.string.charAt(stream.pos-2);\n\n      var endingString = ((nextChar !== \"\\\\\" && peekChar === quote) || (nextChar === quote && previousChar !== \"\\\\\"));\n\n      if (endingString) {\n        if (nextChar !== quote && greedy) { stream.next(); }\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        state.tokenizer = tokenBase;\n        return \"string\";\n      } else if (nextChar === \"#\" && peekChar === \"{\") {\n        state.tokenizer = buildInterpolationTokenizer(stringTokenizer);\n        stream.next();\n        return \"operator\";\n      } else {\n        return \"string\";\n      }\n    }\n\n    return stringTokenizer;\n  }\n\n  function buildInterpolationTokenizer(currentTokenizer) {\n    return function(stream, state) {\n      if (stream.peek() === \"}\") {\n        stream.next();\n        state.tokenizer = currentTokenizer;\n        return \"operator\";\n      } else {\n        return tokenBase(stream, state);\n      }\n    };\n  }\n\n  function indent(state) {\n    if (state.indentCount == 0) {\n      state.indentCount++;\n      var lastScopeOffset = state.scopes[0].offset;\n      var currentOffset = lastScopeOffset + config.indentUnit;\n      state.scopes.unshift({ offset:currentOffset });\n    }\n  }\n\n  function dedent(state) {\n    if (state.scopes.length == 1) return;\n\n    state.scopes.shift();\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.peek();\n\n    // Comment\n    if (stream.match(\"/*\")) {\n      state.tokenizer = comment(stream.indentation(), true);\n      return state.tokenizer(stream, state);\n    }\n    if (stream.match(\"//\")) {\n      state.tokenizer = comment(stream.indentation(), false);\n      return state.tokenizer(stream, state);\n    }\n\n    // Interpolation\n    if (stream.match(\"#{\")) {\n      state.tokenizer = buildInterpolationTokenizer(tokenBase);\n      return \"operator\";\n    }\n\n    // Strings\n    if (ch === '\"' || ch === \"'\") {\n      stream.next();\n      state.tokenizer = buildStringTokenizer(ch);\n      return \"string\";\n    }\n\n    if(!state.cursorHalf){// state.cursorHalf === 0\n    // first half i.e. before : for key-value pairs\n    // including selectors\n\n      if (ch === \"-\") {\n        if (stream.match(/^-\\w+-/)) {\n          return \"meta\";\n        }\n      }\n\n      if (ch === \".\") {\n        stream.next();\n        if (stream.match(/^[\\w-]+/)) {\n          indent(state);\n          return \"qualifier\";\n        } else if (stream.peek() === \"#\") {\n          indent(state);\n          return \"tag\";\n        }\n      }\n\n      if (ch === \"#\") {\n        stream.next();\n        // ID selectors\n        if (stream.match(/^[\\w-]+/)) {\n          indent(state);\n          return \"builtin\";\n        }\n        if (stream.peek() === \"#\") {\n          indent(state);\n          return \"tag\";\n        }\n      }\n\n      // Variables\n      if (ch === \"$\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        return \"variable-2\";\n      }\n\n      // Numbers\n      if (stream.match(/^-?[0-9\\.]+/))\n        return \"number\";\n\n      // Units\n      if (stream.match(/^(px|em|in)\\b/))\n        return \"unit\";\n\n      if (stream.match(keywordsRegexp))\n        return \"keyword\";\n\n      if (stream.match(/^url/) && stream.peek() === \"(\") {\n        state.tokenizer = urlTokens;\n        return \"atom\";\n      }\n\n      if (ch === \"=\") {\n        // Match shortcut mixin definition\n        if (stream.match(/^=[\\w-]+/)) {\n          indent(state);\n          return \"meta\";\n        }\n      }\n\n      if (ch === \"+\") {\n        // Match shortcut mixin definition\n        if (stream.match(/^\\+[\\w-]+/)){\n          return \"variable-3\";\n        }\n      }\n\n      if(ch === \"@\"){\n        if(stream.match('@extend')){\n          if(!stream.match(/\\s*[\\w]/))\n            dedent(state);\n        }\n      }\n\n\n      // Indent Directives\n      if (stream.match(/^@(else if|if|media|else|for|each|while|mixin|function)/)) {\n        indent(state);\n        return \"def\";\n      }\n\n      // Other Directives\n      if (ch === \"@\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        return \"def\";\n      }\n\n      if (stream.eatWhile(/[\\w-]/)){\n        if(stream.match(/ *: *[\\w-\\+\\$#!\\(\"']/,false)){\n          word = stream.current().toLowerCase();\n          var prop = state.prevProp + \"-\" + word;\n          if (propertyKeywords.hasOwnProperty(prop)) {\n            return \"property\";\n          } else if (propertyKeywords.hasOwnProperty(word)) {\n            state.prevProp = word;\n            return \"property\";\n          } else if (fontProperties.hasOwnProperty(word)) {\n            return \"property\";\n          }\n          return \"tag\";\n        }\n        else if(stream.match(/ *:/,false)){\n          indent(state);\n          state.cursorHalf = 1;\n          state.prevProp = stream.current().toLowerCase();\n          return \"property\";\n        }\n        else if(stream.match(/ *,/,false)){\n          return \"tag\";\n        }\n        else{\n          indent(state);\n          return \"tag\";\n        }\n      }\n\n      if(ch === \":\"){\n        if (stream.match(pseudoElementsRegexp)){ // could be a pseudo-element\n          return \"variable-3\";\n        }\n        stream.next();\n        state.cursorHalf=1;\n        return \"operator\";\n      }\n\n    } // cursorHalf===0 ends here\n    else{\n\n      if (ch === \"#\") {\n        stream.next();\n        // Hex numbers\n        if (stream.match(/[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/)){\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n          return \"number\";\n        }\n      }\n\n      // Numbers\n      if (stream.match(/^-?[0-9\\.]+/)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"number\";\n      }\n\n      // Units\n      if (stream.match(/^(px|em|in)\\b/)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"unit\";\n      }\n\n      if (stream.match(keywordsRegexp)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"keyword\";\n      }\n\n      if (stream.match(/^url/) && stream.peek() === \"(\") {\n        state.tokenizer = urlTokens;\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"atom\";\n      }\n\n      // Variables\n      if (ch === \"$\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"variable-2\";\n      }\n\n      // bang character for !important, !default, etc.\n      if (ch === \"!\") {\n        stream.next();\n        state.cursorHalf = 0;\n        return stream.match(/^[\\w]+/) ? \"keyword\": \"operator\";\n      }\n\n      if (stream.match(opRegexp)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"operator\";\n      }\n\n      // attributes\n      if (stream.eatWhile(/[\\w-]/)) {\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        word = stream.current().toLowerCase();\n        if (valueKeywords.hasOwnProperty(word)) {\n          return \"atom\";\n        } else if (colorKeywords.hasOwnProperty(word)) {\n          return \"keyword\";\n        } else if (propertyKeywords.hasOwnProperty(word)) {\n          state.prevProp = stream.current().toLowerCase();\n          return \"property\";\n        } else {\n          return \"tag\";\n        }\n      }\n\n      //stream.eatSpace();\n      if (isEndLine(stream)) {\n        state.cursorHalf = 0;\n        return null;\n      }\n\n    } // else ends here\n\n    if (stream.match(opRegexp))\n      return \"operator\";\n\n    // If we haven't returned by now, we move 1 character\n    // and return an error\n    stream.next();\n    return null;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) state.indentCount = 0;\n    var style = state.tokenizer(stream, state);\n    var current = stream.current();\n\n    if (current === \"@return\" || current === \"}\"){\n      dedent(state);\n    }\n\n    if (style !== null) {\n      var startOfToken = stream.pos - current.length;\n\n      var withCurrentIndent = startOfToken + (config.indentUnit * state.indentCount);\n\n      var newScopes = [];\n\n      for (var i = 0; i < state.scopes.length; i++) {\n        var scope = state.scopes[i];\n\n        if (scope.offset <= withCurrentIndent)\n          newScopes.push(scope);\n      }\n\n      state.scopes = newScopes;\n    }\n\n\n    return style;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenizer: tokenBase,\n        scopes: [{offset: 0, type: \"sass\"}],\n        indentCount: 0,\n        cursorHalf: 0,  // cursor half tells us if cursor lies after (1)\n                        // or before (0) colon (well... more or less)\n        definedVars: [],\n        definedMixins: []\n      };\n    },\n    token: function(stream, state) {\n      var style = tokenLexer(stream, state);\n\n      state.lastToken = { style: style, content: stream.current() };\n\n      return style;\n    },\n\n    indent: function(state) {\n      return state.scopes[0].offset;\n    },\n\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"indent\"\n  };\n}, \"css\");\n\nCodeMirror.defineMIME(\"text/x-sass\", \"sass\");\n\n});\n"],"sourceRoot":""}