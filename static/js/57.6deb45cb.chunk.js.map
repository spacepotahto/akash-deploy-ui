{"version":3,"sources":["../node_modules/codemirror/mode/go/go.js"],"names":["CodeMirror","defineMode","config","curPunc","indentUnit","keywords","atoms","isOperatorChar","tokenBase","stream","state","ch","next","tokenize","tokenString","test","match","eat","tokenComment","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","Pass","firstChar","charAt","closing","electricChars","closeBrackets","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME","mod","require"],"mappings":"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","file":"static/js/57.6deb45cb.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"go\", function(config) {\n  var indentUnit = config.indentUnit;\n\n  var keywords = {\n    \"break\":true, \"case\":true, \"chan\":true, \"const\":true, \"continue\":true,\n    \"default\":true, \"defer\":true, \"else\":true, \"fallthrough\":true, \"for\":true,\n    \"func\":true, \"go\":true, \"goto\":true, \"if\":true, \"import\":true,\n    \"interface\":true, \"map\":true, \"package\":true, \"range\":true, \"return\":true,\n    \"select\":true, \"struct\":true, \"switch\":true, \"type\":true, \"var\":true,\n    \"bool\":true, \"byte\":true, \"complex64\":true, \"complex128\":true,\n    \"float32\":true, \"float64\":true, \"int8\":true, \"int16\":true, \"int32\":true,\n    \"int64\":true, \"string\":true, \"uint8\":true, \"uint16\":true, \"uint32\":true,\n    \"uint64\":true, \"int\":true, \"uint\":true, \"uintptr\":true, \"error\": true,\n    \"rune\":true\n  };\n\n  var atoms = {\n    \"true\":true, \"false\":true, \"iota\":true, \"nil\":true, \"append\":true,\n    \"cap\":true, \"close\":true, \"complex\":true, \"copy\":true, \"delete\":true, \"imag\":true,\n    \"len\":true, \"make\":true, \"new\":true, \"panic\":true, \"print\":true,\n    \"println\":true, \"real\":true, \"recover\":true\n  };\n\n  var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\d\\.]/.test(ch)) {\n      if (ch == \".\") {\n        stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n      } else if (ch == \"0\") {\n        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n      } else {\n        stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n      }\n      return \"number\";\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (cur == \"case\" || cur == \"default\") curPunc = \"case\";\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && quote != \"`\" && next == \"\\\\\";\n      }\n      if (end || !(escaped || quote == \"`\"))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n        if (ctx.type == \"case\") ctx.type = \"}\";\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"case\") ctx.type = \"case\";\n      else if (curPunc == \"}\" && ctx.type == \"}\") popContext(state);\n      else if (curPunc == ctx.type) popContext(state);\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"case\" && /^(?:case|default)\\b/.test(textAfter)) {\n        state.context.type = \"}\";\n        return ctx.indented;\n      }\n      var closing = firstChar == ctx.type;\n      if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}):\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"brace\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-go\", \"go\");\n\n});\n"],"sourceRoot":""}