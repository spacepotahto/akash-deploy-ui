{"version":3,"sources":["../node_modules/codemirror/mode/solr/solr.js"],"names":["CodeMirror","defineMode","isStringChar","isOperatorChar","isOperatorString","isNumber","word","parseFloat","toString","tokenString","quote","stream","state","next","escaped","tokenize","tokenBase","tokenOperator","operator","style","eat","tokenWord","ch","peek","match","test","startState","token","eatSpace","defineMIME","mod","require"],"mappings":"+GAUG,SAASA,GACZ,aAEAA,EAAWC,WAAW,QAAQ,WAG5B,IAAIC,EAAe,4CACfC,EAAiB,uBACjBC,EAAmB,qBAEvB,SAASC,EAASC,GAChB,OAAOC,WAAWD,GAAME,aAAeF,EAGzC,SAASG,EAAYC,GACnB,OAAO,SAASC,EAAQC,GAEtB,IADA,IAAqBC,EAAjBC,GAAU,EACmB,OAAzBD,EAAOF,EAAOE,UAChBA,GAAQH,GAAUI,IACtBA,GAAWA,GAAmB,MAARD,EAIxB,OADKC,IAASF,EAAMG,SAAWC,GACxB,UAIX,SAASC,EAAcC,GACrB,OAAO,SAASP,EAAQC,GACtB,IAAIO,EAAQ,WAaZ,MAZgB,KAAZD,EACFC,GAAS,YACU,KAAZD,EACPC,GAAS,YACU,KAAZD,EACPP,EAAOS,IAAI,MACQ,KAAZF,EACPP,EAAOS,IAAI,MACQ,KAAZF,IACPC,GAAS,UAEXP,EAAMG,SAAWC,EACVG,GAIX,SAASE,EAAUC,GACjB,OAAO,SAASX,EAAQC,GAEtB,IADA,IAAIN,EAAOgB,GACHA,EAAKX,EAAOY,SAAqC,MAA1BD,EAAGE,MAAMtB,IACtCI,GAAQK,EAAOE,OAIjB,OADAD,EAAMG,SAAWC,EACbZ,EAAiBqB,KAAKnB,GACjB,WACAD,EAASC,GACT,SACiB,KAAjBK,EAAOY,OACP,QAEA,UAIb,SAASP,EAAUL,EAAQC,GACzB,IAAIU,EAAKX,EAAOE,OAQhB,MAPU,KAANS,EACFV,EAAMG,SAAWN,EAAYa,GACtBnB,EAAesB,KAAKH,GAC3BV,EAAMG,SAAWE,EAAcK,GACxBpB,EAAauB,KAAKH,KACzBV,EAAMG,SAAWM,EAAUC,IAErBV,EAAMG,UAAYC,EAAaJ,EAAMG,SAASJ,EAAQC,GAAS,KAGzE,MAAO,CACLc,WAAY,WACV,MAAO,CACLX,SAAUC,IAIdW,MAAO,SAAShB,EAAQC,GACtB,OAAID,EAAOiB,WAAmB,KACvBhB,EAAMG,SAASJ,EAAQC,QAKpCZ,EAAW6B,WAAW,cAAe,QAhGjCC,CAAIC,EAAQ","file":"static/js/98.5ef287ea.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"solr\", function() {\n  \"use strict\";\n\n  var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\n  var isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\n  var isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\n  function isNumber(word) {\n    return parseFloat(word).toString() === word;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenOperator(operator) {\n    return function(stream, state) {\n      var style = \"operator\";\n      if (operator == \"+\")\n        style += \" positive\";\n      else if (operator == \"-\")\n        style += \" negative\";\n      else if (operator == \"|\")\n        stream.eat(/\\|/);\n      else if (operator == \"&\")\n        stream.eat(/\\&/);\n      else if (operator == \"^\")\n        style += \" boost\";\n\n      state.tokenize = tokenBase;\n      return style;\n    };\n  }\n\n  function tokenWord(ch) {\n    return function(stream, state) {\n      var word = ch;\n      while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n        word += stream.next();\n      }\n\n      state.tokenize = tokenBase;\n      if (isOperatorString.test(word))\n        return \"operator\";\n      else if (isNumber(word))\n        return \"number\";\n      else if (stream.peek() == \":\")\n        return \"field\";\n      else\n        return \"string\";\n    };\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"')\n      state.tokenize = tokenString(ch);\n    else if (isOperatorChar.test(ch))\n      state.tokenize = tokenOperator(ch);\n    else if (isStringChar.test(ch))\n      state.tokenize = tokenWord(ch);\n\n    return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-solr\", \"solr\");\n\n});\n"],"sourceRoot":""}