{"version":3,"sources":["../node_modules/codemirror/mode/dtd/dtd.js"],"names":["CodeMirror","defineMode","config","type","indentUnit","ret","style","tp","tokenBase","stream","state","ch","next","eat","tokenize","inBlock","eatWhile","match","tokenString","sc","current","substr","length","backUp","tokenSGMLComment","dashes","quote","escaped","terminator","eol","startState","base","baseIndent","stack","token","eatSpace","context","push","pop","indent","textAfter","n","charAt","electricChars","defineMIME","mod","require"],"mappings":"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","file":"static/js/45.71f7d30f.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n  DTD mode\n  Ported to CodeMirror by Peter Kroon <plakroon@gmail.com>\n  Report bugs/issues here: https://github.com/codemirror/CodeMirror/issues\n  GitHub: @peterkroon\n*/\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"dtd\", function(config) {\n  var indentUnit = config.indentUnit, type;\n  function ret(style, tp) {type = tp; return style;}\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch == \"<\" && stream.eat(\"!\") ) {\n      if (stream.eatWhile(/[\\-]/)) {\n        state.tokenize = tokenSGMLComment;\n        return tokenSGMLComment(stream, state);\n      } else if (stream.eatWhile(/[\\w]/)) return ret(\"keyword\", \"doindent\");\n    } else if (ch == \"<\" && stream.eat(\"?\")) { //xml declaration\n      state.tokenize = inBlock(\"meta\", \"?>\");\n      return ret(\"meta\", ch);\n    } else if (ch == \"#\" && stream.eatWhile(/[\\w]/)) return ret(\"atom\", \"tag\");\n    else if (ch == \"|\") return ret(\"keyword\", \"separator\");\n    else if (ch.match(/[\\(\\)\\[\\]\\-\\.,\\+\\?>]/)) return ret(null, ch);//if(ch === \">\") return ret(null, \"endtag\"); else\n    else if (ch.match(/[\\[\\]]/)) return ret(\"rule\", ch);\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (stream.eatWhile(/[a-zA-Z\\?\\+\\d]/)) {\n      var sc = stream.current();\n      if( sc.substr(sc.length-1,sc.length).match(/\\?|\\+/) !== null )stream.backUp(1);\n      return ret(\"tag\", \"tag\");\n    } else if (ch == \"%\" || ch == \"*\" ) return ret(\"number\", \"number\");\n    else {\n      stream.eatWhile(/[\\w\\\\\\-_%.{,]/);\n      return ret(null, null);\n    }\n  }\n\n  function tokenSGMLComment(stream, state) {\n    var dashes = 0, ch;\n    while ((ch = stream.next()) != null) {\n      if (dashes >= 2 && ch == \">\") {\n        state.tokenize = tokenBase;\n        break;\n      }\n      dashes = (ch == \"-\") ? dashes + 1 : 0;\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return ret(\"string\", \"tag\");\n    };\n  }\n\n  function inBlock(style, terminator) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.match(terminator)) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        stream.next();\n      }\n      return style;\n    };\n  }\n\n  return {\n    startState: function(base) {\n      return {tokenize: tokenBase,\n              baseIndent: base || 0,\n              stack: []};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      var context = state.stack[state.stack.length-1];\n      if (stream.current() == \"[\" || type === \"doindent\" || type == \"[\") state.stack.push(\"rule\");\n      else if (type === \"endtag\") state.stack[state.stack.length-1] = \"endtag\";\n      else if (stream.current() == \"]\" || type == \"]\" || (type == \">\" && context == \"rule\")) state.stack.pop();\n      else if (type == \"[\") state.stack.push(\"[\");\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var n = state.stack.length;\n\n      if( textAfter.charAt(0) === ']' )n--;\n      else if(textAfter.substr(textAfter.length-1, textAfter.length) === \">\"){\n        if(textAfter.substr(0,1) === \"<\") {}\n        else if( type == \"doindent\" && textAfter.length > 1 ) {}\n        else if( type == \"doindent\")n--;\n        else if( type == \">\" && textAfter.length > 1) {}\n        else if( type == \"tag\" && textAfter !== \">\") {}\n        else if( type == \"tag\" && state.stack[state.stack.length-1] == \"rule\")n--;\n        else if( type == \"tag\")n++;\n        else if( textAfter === \">\" && state.stack[state.stack.length-1] == \"rule\" && type === \">\")n--;\n        else if( textAfter === \">\" && state.stack[state.stack.length-1] == \"rule\") {}\n        else if( textAfter.substr(0,1) !== \"<\" && textAfter.substr(0,1) === \">\" )n=n-1;\n        else if( textAfter === \">\") {}\n        else n=n-1;\n        //over rule them all\n        if(type == null || type == \"]\")n--;\n      }\n\n      return state.baseIndent + n * indentUnit;\n    },\n\n    electricChars: \"]>\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/xml-dtd\", \"dtd\");\n\n});\n"],"sourceRoot":""}