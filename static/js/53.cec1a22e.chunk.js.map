{"version":3,"sources":["../node_modules/codemirror/mode/forth/forth.js"],"names":["CodeMirror","toWordList","words","ret","split","forEach","e","push","name","coreWordList","immediateWordList","defineMode","searchWordList","wordList","word","i","length","toUpperCase","startState","state","base","token","stream","stt","mat","eatSpace","match","backUp","undefined","skipToEnd","eatWhile","s","eat","defineMIME","mod","require"],"mappings":"+GAYG,SAASA,GACV,aAEA,SAASC,EAAWC,GAClB,IAAIC,EAAM,GAIV,OAHAD,EAAME,MAAM,KAAKC,SAAQ,SAASC,GAChCH,EAAII,KAAK,CAACC,KAAMF,OAEXH,EAGT,IAAIM,EAAeR,EACrB,u6BAuCMS,EAAoBT,EAAW,oIAEnCD,EAAWW,WAAW,SAAS,WAC7B,SAASC,EAAgBC,EAAUC,GACjC,IAAIC,EACJ,IAAKA,EAAIF,EAASG,OAAS,EAAGD,GAAK,EAAGA,IACpC,GAAIF,EAASE,GAAGP,OAASM,EAAKG,cAC5B,OAAOJ,EAASE,GAKxB,MAAO,CACLG,WAAY,WACV,MAAO,CACLC,MAAO,GACPC,KAAM,GACNX,aAAcA,EACdC,kBAAmBA,EACnBG,SAAU,KAGdQ,MAAO,SAAUC,EAAQC,GACvB,IAAIC,EACJ,GAAIF,EAAOG,WACT,OAAO,KAET,GAAkB,KAAdF,EAAIJ,MAAc,CACpB,GAAIG,EAAOI,MAAM,wBAEf,OADAH,EAAIJ,MAAQ,eACL,sBAGT,GADAK,EAAMF,EAAOI,MAAM,wBAIjB,OAFAH,EAAIV,SAASN,KAAK,CAACC,KAAMgB,EAAI,GAAGP,gBAChCM,EAAIJ,MAAQ,eACL,MAAQI,EAAIJ,MAGrB,GADAK,EAAMF,EAAOI,MAAM,uFAGjB,OADAH,EAAIV,SAASN,KAAK,CAACC,KAAMgB,EAAI,GAAGP,gBACzB,MAAQM,EAAIJ,MAGrB,GADAK,EAAMF,EAAOI,MAAM,+BAEjB,MAAO,UAAYH,EAAIJ,UAElB,CAEP,GAAIG,EAAOI,MAAM,gBAGf,OAFAH,EAAIJ,MAAQ,GACZG,EAAOK,OAAO,GACP,sBAET,GAAIL,EAAOI,MAAM,eAEf,OADAH,EAAIJ,MAAQ,GACL,sBAET,GAAIG,EAAOI,MAAM,4BACf,MAAO,UAMX,OADAF,EAAMF,EAAOI,MAAM,uBAE4BE,IAAzChB,EAAeW,EAAIV,SAAUW,EAAI,IAC5B,WAAaD,EAAIJ,MAIX,OAAXK,EAAI,IACNF,EAAOO,YACE,UAAYN,EAAIJ,YAIwBS,IAA7ChB,EAAeW,EAAId,aAAce,EAAI,IAChC,UAAYD,EAAIJ,WAE6BS,IAAlDhB,EAAeW,EAAIb,kBAAmBc,EAAI,IACrC,UAAYD,EAAIJ,MAGV,MAAXK,EAAI,IACNF,EAAOQ,UAAS,SAAUC,GAAK,MAAa,MAANA,KACtCT,EAAOU,IAAI,KACJ,UAAYT,EAAIJ,OAIV,OAAXK,EAAI,IACNF,EAAOQ,UAAS,SAAUC,GAAK,MAAa,MAANA,KACtCT,EAAOU,IAAI,KACJ,SAAWT,EAAIJ,OAET,OAAXK,EAAI,IAA0B,OAAXA,EAAI,IAA0B,OAAXA,EAAI,IAC5CF,EAAOQ,UAAS,SAAUC,GAAK,MAAa,MAANA,KACtCT,EAAOU,IAAI,KACJ,SAAWT,EAAIJ,OAIpBK,EAAI,GAAK,YACJ,SAAWD,EAAIJ,MAMjB,OAASI,EAAIJ,WA7CxB,OAkDJnB,EAAWiC,WAAW,eAAgB,SA3KpCC,CAAIC,EAAQ","file":"static/js/53.cec1a22e.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Author: Aliaksei Chapyzhenka\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function toWordList(words) {\n    var ret = [];\n    words.split(' ').forEach(function(e){\n      ret.push({name: e});\n    });\n    return ret;\n  }\n\n  var coreWordList = toWordList(\n'INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\n\n  var immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\n\n  CodeMirror.defineMode('forth', function() {\n    function searchWordList (wordList, word) {\n      var i;\n      for (i = wordList.length - 1; i >= 0; i--) {\n        if (wordList[i].name === word.toUpperCase()) {\n          return wordList[i];\n        }\n      }\n      return undefined;\n    }\n  return {\n    startState: function() {\n      return {\n        state: '',\n        base: 10,\n        coreWordList: coreWordList,\n        immediateWordList: immediateWordList,\n        wordList: []\n      };\n    },\n    token: function (stream, stt) {\n      var mat;\n      if (stream.eatSpace()) {\n        return null;\n      }\n      if (stt.state === '') { // interpretation\n        if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n          stt.state = ' compilation';\n          return 'builtin compilation';\n        }\n        mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n        if (mat) {\n          stt.wordList.push({name: mat[2].toUpperCase()});\n          stt.state = ' compilation';\n          return 'def' + stt.state;\n        }\n        mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n        if (mat) {\n          stt.wordList.push({name: mat[2].toUpperCase()});\n          return 'def' + stt.state;\n        }\n        mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n        if (mat) {\n          return 'builtin' + stt.state;\n        }\n        } else { // compilation\n        // ; [\n        if (stream.match(/^(\\;|\\[)(\\s)/)) {\n          stt.state = '';\n          stream.backUp(1);\n          return 'builtin compilation';\n        }\n        if (stream.match(/^(\\;|\\[)($)/)) {\n          stt.state = '';\n          return 'builtin compilation';\n        }\n        if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n          return 'builtin';\n        }\n      }\n\n      // dynamic wordlist\n      mat = stream.match(/^(\\S+)(\\s+|$)/);\n      if (mat) {\n        if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n          return 'variable' + stt.state;\n        }\n\n        // comments\n        if (mat[1] === '\\\\') {\n          stream.skipToEnd();\n            return 'comment' + stt.state;\n          }\n\n          // core words\n          if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n            return 'builtin' + stt.state;\n          }\n          if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n            return 'keyword' + stt.state;\n          }\n\n          if (mat[1] === '(') {\n            stream.eatWhile(function (s) { return s !== ')'; });\n            stream.eat(')');\n            return 'comment' + stt.state;\n          }\n\n          // // strings\n          if (mat[1] === '.(') {\n            stream.eatWhile(function (s) { return s !== ')'; });\n            stream.eat(')');\n            return 'string' + stt.state;\n          }\n          if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n            stream.eatWhile(function (s) { return s !== '\"'; });\n            stream.eat('\"');\n            return 'string' + stt.state;\n          }\n\n          // numbers\n          if (mat[1] - 0xfffffffff) {\n            return 'number' + stt.state;\n          }\n          // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n          //     return 'number' + stt.state;\n          // }\n\n          return 'atom' + stt.state;\n        }\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-forth\", \"forth\");\n});\n"],"sourceRoot":""}