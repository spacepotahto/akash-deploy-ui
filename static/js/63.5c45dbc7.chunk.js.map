{"version":3,"sources":["../node_modules/codemirror/mode/jinja2/jinja2.js"],"names":["CodeMirror","defineMode","keywords","operator","sign","atom","number","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","match","instring","next","eat","sol","RegExp","join","startState","tokenize","token","blockCommentStart","blockCommentEnd","defineMIME","mod","require"],"mappings":"+GAUG,SAASA,GACV,aAEAA,EAAWC,WAAW,UAAU,WAC9B,IAAIC,EAAW,CAAC,MAAO,KAAM,QAAS,WAAY,KAAM,QAAS,QAAS,OAAQ,OAChF,UAAW,SAAU,YAAa,UAAW,MAC7C,SAAU,KAAM,QAAS,YAAa,eACtC,UAAW,aAAc,aACzB,gBAAiB,KAAM,UAAW,OAAQ,MAAO,MAAO,KACxD,SAAU,UAAW,WAAY,YACjC,eAAgB,MAAO,cAAe,YACtC,aAAc,eAAgB,gBAC9B,YAAa,aAAc,cAC3B,eAAgB,aAAc,MAAO,OAAQ,UAC7C,uBAAwB,QAAS,WAAY,OAAQ,aACrD,gBAAiB,0BACjB,4BAA6B,UAC/BC,EAAW,oBACXC,EAAO,aACPC,EAAO,CAAC,OAAQ,SAChBC,EAAS,6BAKT,SAASC,EAAWC,EAAQC,GAC1B,IAAIC,EAAKF,EAAOG,OAGhB,GAAIF,EAAMG,UAOR,OANIJ,EAAOK,OAAO,OAGhBL,EAAOM,SAAS,QAChBL,EAAMG,WAAY,GAHlBJ,EAAOO,YAKF,UAEF,GAAIN,EAAMO,MAAO,CAEtB,GAAGP,EAAMN,SAAU,CAEjB,GADAM,EAAMN,UAAW,EACdK,EAAOS,MAAMZ,GACd,MAAO,OAET,GAAGG,EAAOS,MAAMX,GACd,MAAO,SAIX,GAAGG,EAAML,KAAM,CAEb,GADAK,EAAML,MAAO,EACVI,EAAOS,MAAMZ,GACd,MAAO,OAET,GAAGG,EAAOS,MAAMX,GACd,MAAO,SAIX,GAAGG,EAAMS,SAKP,OAJGR,GAAMD,EAAMS,WACbT,EAAMS,UAAW,GAEnBV,EAAOW,OACA,SACF,GAAS,KAANT,GAAmB,KAANA,EAGrB,OAFAD,EAAMS,SAAWR,EACjBF,EAAOW,OACA,SACF,GAAGX,EAAOS,MAAMR,EAAMO,MAAQ,MAAQR,EAAOY,IAAI,MAAQZ,EAAOS,MAAMR,EAAMO,MAAQ,KAEzF,OADAP,EAAMO,OAAQ,EACP,MACF,GAAGR,EAAOS,MAAMd,GAErB,OADAM,EAAMN,UAAW,EACV,WACF,GAAGK,EAAOS,MAAMb,GACrBK,EAAML,MAAO,OAEb,GAAGI,EAAOY,IAAI,MAAQZ,EAAOa,MAAO,CAClC,GAAGb,EAAOS,MAAMf,GACd,MAAO,UAET,GAAGM,EAAOS,MAAMZ,GACd,MAAO,OAET,GAAGG,EAAOS,MAAMX,GACd,MAAO,SAENE,EAAOa,OACRb,EAAOW,YAGTX,EAAOW,OAIX,MAAO,WACF,GAAIX,EAAOY,IAAI,KAAM,CAC1B,GAAIZ,EAAOY,IAAI,KAQb,OAPAX,EAAMG,WAAY,EACdJ,EAAOK,OAAO,OAGhBL,EAAOM,SAAS,QAChBL,EAAMG,WAAY,GAHlBJ,EAAOO,YAKF,UAEF,GAAIL,EAAKF,EAAOY,IAAI,QAOzB,OALAX,EAAMO,MAAQN,EACL,KAANA,IACDD,EAAMO,MAAQ,KAEhBR,EAAOY,IAAI,KACJ,MAGXZ,EAAOW,OAGT,OApGAjB,EAAW,IAAIoB,OAAO,KAAOpB,EAASqB,KAAK,OAAS,SACpDlB,EAAO,IAAIiB,OAAO,KAAOjB,EAAKkB,KAAK,OAAS,SAmGrC,CACLC,WAAY,WACV,MAAO,CAACC,SAAUlB,IAEpBmB,MAAO,SAAUlB,EAAQC,GACvB,OAAOA,EAAMgB,SAASjB,EAAQC,IAEhCkB,kBAAmB,KACnBC,gBAAiB,SAIrB5B,EAAW6B,WAAW,cAAe,UA3InCC,CAAIC,EAAQ","file":"static/js/63.5c45dbc7.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function() {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n      \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\",\n      \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n      \"ifequal\", \"endifequal\", \"ifnotequal\",\n      \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n      \"parsed\", \"regroup\", \"reversed\", \"spaceless\",\n      \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n      \"closeblock\", \"openvariable\", \"closevariable\",\n      \"openbrace\", \"closebrace\", \"opencomment\",\n      \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n      \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n      \"endblocktrans\", \"get_available_languages\",\n      \"get_current_language_bidi\", \"plural\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if(!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if(state.operator) {\n          state.operator = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if(state.sign) {\n          state.sign = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if(state.instring) {\n          if(ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if(ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if(stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if(stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if(stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if(stream.eat(\" \") || stream.sol()) {\n            if(stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if(stream.match(atom)) {\n              return \"atom\";\n            }\n            if(stream.match(number)) {\n              return \"number\";\n            }\n            if(stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if(!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if(ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{#\",\n      blockCommentEnd: \"#}\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/jinja2\", \"jinja2\");\n});\n"],"sourceRoot":""}